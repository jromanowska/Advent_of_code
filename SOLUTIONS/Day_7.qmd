---
title: "Day 7"
author: "Julia Romanowska"
---

```{r setup, include = FALSE}
library(tidyverse)
library(here)
library(emoji)
```

## Data

List of commands and output from terminal, used to determine the size of files
in each directory.

```{r}
input_file <- here("DATA", "input_day_07.txt")
scan(
  input_file,
  what = "character",
  sep = "\n",
  nmax = 10
) %>% cat(sep = "\n")
```

I will construct a structure to hold all the information:

- all the directories will be held in one list,
- each directory is a list, holding:
    - pointer to the parent directory,
    - pointers to children-directories,
    - list of files

## Functions

I will need several small functions:

- `cd /` - this is starting from top; this is used only once in the input, so I
can ignore this line

- `cd ..` - go up in the list-levels

```{r}
go_up <- function(cur_level){
  cur_level <<- all_dirs[[cur_level$level_up]]
}
```

- `cd xxx` - go down in the list-levels, to the list named `xxx`

```{r}
go_down <- function(cur_level, new_level){
  cur_level <<- all_dirs[[new_level]]
}
```

- `ls` - list everything, read all the lines until next one that starts with `$`
and do one of the following actions:

    - `dir xxx` - create a list named `xxx`
    
```{r}
create_level <- function(cur_level, new_name){
  # new level needs to contain list of files within this dir., and reference
  #  to the level up
  new_list <- list(
    list(
      files = list(),
      level_up = cur_level$name,
      name = new_name,
      children = c()
    )
  )
  names(new_list) <- new_name
  
  # update children
  all_dirs[[cur_level$name]]$children <- c(
    all_dirs[[cur_level$name]]$children, new_name
  )
  # append new list
  all_dirs <<- c(
    all_dirs,
    new_list
  )
}
```

    - `123 xxx` - add element to the 'files' list in the current list, with
    `123` as the value (size of the file)

```{r}
create_element <- function(cur_level, new_el, new_name){
  new_list <- list(as.numeric(new_el))
  names(new_list) <- new_name
  cur_level_name <- cur_level$name
  
  all_dirs[[cur_level_name]]$files <<- c(
    all_dirs[[cur_level_name]]$files, new_list
  )
  # update the pointer
  cur_level <<- all_dirs[[cur_level_name]]
}
```

## Test

I will test it on the example input.

```{r test_input}
(exmpl_input <- scan(
  here("DATA", "small_input_day_07.txt"),
  what = "character",
  sep = "\n"
)) %>% cat(sep = "\n")

exmpl_input <- exmpl_input[-1]

new_list <- list(
  list(
    files = list(),
    level_up = NULL,
    name = "start",
    children = c()
  )
)
names(new_list) <- "start"
all_dirs <- new_list
cur_level <- all_dirs$start
```

```{r run_algorithm}
for(cur_line in exmpl_input){
  cur_line_elements <- str_split(cur_line, pattern = " ") %>% unlist()
  if(cur_line_elements[1] == "$"){
    # check whether it's 'ls' or 'cd'
    if(cur_line_elements[2] == "cd"){
      # go level up or down
      if(cur_line_elements[3] == ".."){
        cat("go up\n")
        go_up(cur_level)
        next
      }
      cat("go down to", cur_line_elements[3], "\n")
      go_down(cur_level, cur_line_elements[3])
      next
    }
    next
  } else {
    if(cur_line_elements[1] == "dir"){
      cat("create level: ", cur_line_elements[2], "\n")
      create_level(cur_level, cur_line_elements[2])
      next
    }
    # this means that it's the size of the file in this directory
    cat("create element: ", cur_line_elements[1:2], "\n")
    create_element(cur_level, cur_line_elements[1], cur_line_elements[2])
  }
}
```

The directory structure looks like this:

```{r}
str(all_dirs)
```

And the total size of the elements in each directory:

```{r}
get_sum_size_dir <- function(cur_dir){
  cur_sum <- 0
  cur_children <- all_dirs[[cur_dir]]$children
  if(length(cur_children) != 0){
    cur_sum <- map_dbl(cur_children, get_sum_size_dir) %>% sum()
  }
  
  cur_files <- all_dirs[[cur_dir]]$files
  if(length(cur_files) != 0){
    cur_sum <- cur_sum + sum(unlist(cur_files))
  }
  return(cur_sum)
}

all_sizes <- map_dbl(all_dirs, function(cur_dir){
  get_sum_size_dir(cur_dir$name)
})
all_sizes
```

::: {.card .border-success .mb-3}
::: {.card-text}
So, in the example input, the directories that have size of _at most_ 100000 are `print(names(all_sizes)[all_sizes < 100000])`! `r unname(emoji_name["partying_face"])`
:::
:::

## Real run

```{r real_input}
(exmpl_input <- scan(
  here("DATA", "input_day_07.txt"),
  what = "character",
  sep = "\n"
)) %>% head(20) %>% cat(sep = "\n")

exmpl_input <- exmpl_input[-1]

new_list <- list(
  list(
    files = list(),
    level_up = NULL,
    name = "start",
    children = c()
  )
)
names(new_list) <- "start"
all_dirs <- new_list
cur_level <- all_dirs$start
```

```{r run_algorithm}
```


