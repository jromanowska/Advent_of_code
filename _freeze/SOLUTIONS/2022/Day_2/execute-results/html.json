{
  "hash": "fafde99e100bab57fa776913d322b742",
  "result": {
    "markdown": "---\ntitle: \"Day 2\"\nauthor: \"Julia Romanowska\"\n---\n\n\n\n\n## Data\n\nWe have a special coding here - let's write a dictionary for that:\n\n- opponents codes:\n\n```\nA = \"rock\", B = \"paper\", C = \"scissors\"\n```\n\n- my codes:\n\n```\nX = \"rock\", Y = \"paper\", Z = \"scissors\"\n```\n\n..but the important thing is that each of these give various points, which we\ncan basically treat as factor-levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(games_in <- read_delim(\n  here(\"DATA\", \"2022\", \"input_day_02.txt\"),\n  delim = \" \",\n  col_names = FALSE,\n  skip_empty_rows = FALSE,\n  show_col_types = FALSE\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,500 × 2\n   X1    X2   \n   <chr> <chr>\n 1 C     Y    \n 2 A     Z    \n 3 B     Y    \n 4 A     Z    \n 5 A     X    \n 6 A     Z    \n 7 B     Y    \n 8 A     Z    \n 9 B     Y    \n10 C     Z    \n# ℹ 2,490 more rows\n```\n:::\n\n```{.r .cell-code}\ngames_fct <- games_in %>%\n  rename(opponent = X1, me = X2) %>%\n  mutate(across(.fns = as.factor))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(.fns = as.factor)`.\nCaused by warning:\n! Using `across()` without supplying `.cols` was deprecated in dplyr 1.1.0.\nℹ Please supply `.cols` instead.\n```\n:::\n:::\n\n\n### Explore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(games_fct)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |games_fct |\n|Number of rows           |2500      |\n|Number of columns        |2         |\n|_______________________  |          |\n|Column type frequency:   |          |\n|factor                   |2         |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts              |\n|:-------------|---------:|-------------:|:-------|--------:|:-----------------------|\n|opponent      |         0|             1|FALSE   |        3|B: 991, C: 795, A: 714  |\n|me            |         0|             1|FALSE   |        3|Y: 1178, Z: 771, X: 551 |\n:::\n\n```{.r .cell-code}\nlevels(games_fct$opponent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\"\n```\n:::\n\n```{.r .cell-code}\nlevels(games_fct$me)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"X\" \"Y\" \"Z\"\n```\n:::\n:::\n\n\n✔️ OK, no missingness and no strange values.\n\n## Check who wins per round\n\nI get `0` if I lose, `3` if it's a draw, and `6` if I win.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' returns points for player1\ncheck_rules <- function(player1, player2){\n  player1_lose <- 0\n  player1_draw <- 3\n  player1_win <- 6\n\n  all_diff <- player1 - player2\n  map_dbl(all_diff, function(cur_diff){\n    if(cur_diff == 0){ # draw\n      return(player1_draw)\n    }\n    \n    if(abs(cur_diff) == 2){ # one of them has 'rock', one 'scissors'\n      if(cur_diff < 0){\n        return(player1_win)\n      }\n      \n      return(player1_lose)\n    }\n    \n    if(cur_diff > 0){ # check who has higher value\n      return(player1_win)\n    }\n    \n    return(player1_lose)\n  })\n}\n\n(games_fct <- games_fct %>%\n  mutate(points = check_rules(as.numeric(me), as.numeric(opponent))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,500 × 3\n   opponent me    points\n   <fct>    <fct>  <dbl>\n 1 C        Y          0\n 2 A        Z          0\n 3 B        Y          3\n 4 A        Z          0\n 5 A        X          3\n 6 A        Z          0\n 7 B        Y          3\n 8 A        Z          0\n 9 B        Y          3\n10 C        Z          3\n# ℹ 2,490 more rows\n```\n:::\n:::\n\n\n## Get total points\n\nIn addition to points gained by drawing or winning a round, I get points for\nwhat I chose (levels of factor).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_score <- games_fct %>%\n  mutate(total_per_round = as.numeric(me) + points) %>%\n  summarise(grand_total = sum(total_per_round))\n```\n:::\n\n\n::: {.card .border-success .mb-3}\n::: {.card-text}\nThe total score is 10941!\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}