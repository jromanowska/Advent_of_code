{
  "hash": "11e8b9e24aeb1022f759351976be2641",
  "result": {
    "markdown": "---\ntitle: \"Day 8\"\nauthor: \"Julia Romanowska\"\n---\n\n\n\n\n## Data\n\nThe input is height of the trees on a grid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_file_path <- here(\"DATA\", \"2022\", \"input_day_08.txt\")\n\nno_rows <- system(paste(\"wc -l\", input_file_path), intern = TRUE) %>%\n  word(1) %>%\n  as.numeric()\nno_cols <- scan(input_file_path, what = \"character\", nmax = 1) %>% str_length()\n```\n:::\n\n\nThere are 99 rows and 99 columns on the grid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_grid <- scan(\n  input_file_path,\n  what = \"character\"\n)\n# let's make a matrix out of it\ninput_grid <- map(\n  input_grid,\n  function(row){\n    cur_row_trees <- str_split(row, pattern = \"\") %>%\n      unlist()\n    return(as.numeric(cur_row_trees))\n  }) %>%\n  do.call(rbind, args = .)\n```\n:::\n\n\nWe can visualize it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_grid %>%\n  as_tibble(rownames = \"row\") %>%\n  pivot_longer(cols = V1:V99, names_to = \"col\", values_to = \"val\") %>%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row)\n  ) %>%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = as.factor(val))) +\n  coord_fixed() +\n  scale_fill_grey() +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nâ„¹ Using compatibility `.name_repair`.\n```\n:::\n\n::: {.cell-output-display}\n![](Day_8_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_visibility <- function(sequence, last = TRUE){\n  # I have a sequence of heights that ends or begins with the tree we are checking\n  if(last){\n    chosen_tree <- sequence[length(sequence)]\n    other_trees <- sequence[-length(sequence)]\n    return(all(other_trees < chosen_tree))\n  }\n  \n  chosen_tree <- sequence[1]\n  other_trees <- sequence[-1]\n  return(all(other_trees < chosen_tree))\n}\n```\n:::\n\n\n## Check all trees\n\nWe don't need to check trees that are on the edge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_visible_trees <- no_cols*2 + (no_rows - 2)*2\n\nvisibility_matrix <- matrix(\n  NA, nrow = no_rows, ncol = no_cols\n)\nfor(cur_row in 2:(no_rows - 1)){\n  for(cur_col in 2:(no_cols - 1)){\n    # check from top\n    cur_sequence <- input_grid[1:cur_row, cur_col]\n    vis_from_top <- check_visibility(cur_sequence)\n    # check from bottom\n    cur_sequence <- input_grid[cur_row:no_rows, cur_col]\n    vis_from_bottom <- check_visibility(cur_sequence, FALSE)\n    # check from left\n    cur_sequence <- input_grid[cur_row, 1:cur_col]\n    vis_from_left <- check_visibility(cur_sequence)\n    # check from right\n    cur_sequence <- input_grid[cur_row, cur_col:no_cols]\n    vis_from_right <- check_visibility(cur_sequence, FALSE)\n    \n    cur_tree_vis <- any(\n      c(vis_from_top, vis_from_bottom, vis_from_left, vis_from_right)\n    )\n    visibility_matrix[cur_row, cur_col] <- cur_tree_vis\n    no_visible_trees <<- no_visible_trees + as.numeric(cur_tree_vis)\n  }\n}\n```\n:::\n\n\nThat's how looks the visibility matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisibility_matrix %>%\n  as_tibble(rownames = \"row\") %>%\n  pivot_longer(cols = V1:V99, names_to = \"col\", values_to = \"val\") %>%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row)\n  ) %>%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = val)) +\n  coord_fixed() +\n  scale_fill_grey() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Day_8_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n::: {.card .border-success .mb-3}\n::: {.card-text}\nThere are 1823 trees that are visible from outside of the grid! ðŸ¥³\n:::\n:::\n",
    "supporting": [
      "Day_8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}