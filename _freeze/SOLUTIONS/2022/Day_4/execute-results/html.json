{
  "hash": "d10ab24ecd6421ced2a86b295ddedb29",
  "result": {
    "markdown": "---\ntitle: \"Day 4\"\nauthor: \"Julia Romanowska\"\n---\n\n\n\n\n## Data\n\nEach line contains a pair of sections which two elves should clean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(sections_list <- read_table(\n  here(\"DATA\", \"2022\", \"input_day_04.txt\"),\n  col_names = \"section_pairs\"\n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\ncols(\n  section_pairs = col_character()\n)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 Ã— 1\n   section_pairs\n   <chr>        \n 1 22-65,22-66  \n 2 91-94,63-91  \n 3 6-88,5-31    \n 4 85-86,64-86  \n 5 40-65,40-65  \n 6 25-82,24-94  \n 7 68-69,68-92  \n 8 60-91,89-92  \n 9 3-72,3-73    \n10 44-85,84-85  \n# â„¹ 990 more rows\n```\n:::\n:::\n\n\nCleaning the data a bit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(\n  sections_list <- sections_list %>%\n   #extract sections for elves\n   separate(col = section_pairs, into = c(\"elf1\", \"elf2\"), sep = \",\") %>%\n   # extract minimums and maximums for each elf\n   separate(col = elf1, into = c(\"elf1_min\", \"elf1_max\"), sep = \"-\") %>%\n   separate(col = elf2, into = c(\"elf2_min\", \"elf2_max\"), sep = \"-\") %>%\n   mutate(across(.cols = everything(), .fns = as.numeric))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 Ã— 4\n   elf1_min elf1_max elf2_min elf2_max\n      <dbl>    <dbl>    <dbl>    <dbl>\n 1       22       65       22       66\n 2       91       94       63       91\n 3        6       88        5       31\n 4       85       86       64       86\n 5       40       65       40       65\n 6       25       82       24       94\n 7       68       69       68       92\n 8       60       91       89       92\n 9        3       72        3       73\n10       44       85       84       85\n# â„¹ 990 more rows\n```\n:::\n:::\n\n\n## Overlapping\n\n### Find entirely overlapping sections.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_overlap <- function(min1, min2, max1, max2){\n  # check whether the second set of numbers is contained in the first\n  return(\n    (min2 >= min1) & (max2 <= max1)\n  )\n}\n\n(sections_list_entire_overlap <- sections_list %>%\n  rowwise() %>%\n  mutate(elf2_overlap = find_overlap(elf1_min, elf2_min, elf1_max, elf2_max)) %>%\n  mutate(elf1_overlap = find_overlap(elf2_min, elf1_min, elf2_max, elf1_max)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 Ã— 6\n# Rowwise: \n   elf1_min elf1_max elf2_min elf2_max elf2_overlap elf1_overlap\n      <dbl>    <dbl>    <dbl>    <dbl> <lgl>        <lgl>       \n 1       22       65       22       66 FALSE        TRUE        \n 2       91       94       63       91 FALSE        FALSE       \n 3        6       88        5       31 FALSE        FALSE       \n 4       85       86       64       86 FALSE        TRUE        \n 5       40       65       40       65 TRUE         TRUE        \n 6       25       82       24       94 FALSE        TRUE        \n 7       68       69       68       92 FALSE        TRUE        \n 8       60       91       89       92 FALSE        FALSE       \n 9        3       72        3       73 FALSE        TRUE        \n10       44       85       84       85 TRUE         FALSE       \n# â„¹ 990 more rows\n```\n:::\n:::\n\n\nFind the total.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntot_overlap <- sections_list_entire_overlap %>%\n  ungroup() %>%\n  mutate(any_overlap = elf2_overlap | elf1_overlap) %>%\n  summarise(sum_overlap = sum(any_overlap)) %>%\n  pull()\n```\n:::\n\n\n::: {.card .border-success .mb-3}\n::: {.card-text}\nThe total number of _entirely_ overlapping regions is 584! ðŸ¥³\n:::\n:::\n\n### Find overlapping at all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_any_overlap <- function(min1, min2, max1, max2){\n  # check whether the second set of numbers is contained in the first\n  return(\n    ((min2 >= min1) & (min2 <= max1)) |\n    ((max2 <= max1) & (max2 >= min1))\n  )\n}\n\n(sections_list_any_overlap <- sections_list %>%\n  rowwise() %>%\n  mutate(elf2_overlap = find_any_overlap(elf1_min, elf2_min, elf1_max, elf2_max)) %>%\n  mutate(elf1_overlap = find_any_overlap(elf2_min, elf1_min, elf2_max, elf1_max)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 Ã— 6\n# Rowwise: \n   elf1_min elf1_max elf2_min elf2_max elf2_overlap elf1_overlap\n      <dbl>    <dbl>    <dbl>    <dbl> <lgl>        <lgl>       \n 1       22       65       22       66 TRUE         TRUE        \n 2       91       94       63       91 TRUE         TRUE        \n 3        6       88        5       31 TRUE         TRUE        \n 4       85       86       64       86 TRUE         TRUE        \n 5       40       65       40       65 TRUE         TRUE        \n 6       25       82       24       94 FALSE        TRUE        \n 7       68       69       68       92 TRUE         TRUE        \n 8       60       91       89       92 TRUE         TRUE        \n 9        3       72        3       73 TRUE         TRUE        \n10       44       85       84       85 TRUE         TRUE        \n# â„¹ 990 more rows\n```\n:::\n:::\n\n\nFind total\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntot_any_overlap <- sections_list_any_overlap %>%\n  ungroup() %>%\n  mutate(any_overlap = elf2_overlap | elf1_overlap) %>%\n  summarise(sum_overlap = sum(any_overlap)) %>%\n  pull()\n```\n:::\n\n\n::: {.card .border-success .mb-3}\n::: {.card-text}\nThe total number of _at tall_ overlapping regions is 933! ðŸ¥³\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}