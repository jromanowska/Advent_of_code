{
  "hash": "8b24f910b520f6e12cbb4df31563fb68",
  "result": {
    "markdown": "---\ntitle: Day 5\nauthor: Julia Romanowska\n---\n\n\n## The input\n\nThere are several maps hidden in the file. All this mapping helps find out how\nto plant the new seeds.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day05.txt\");\ninput_data = open(input_file, \"r\");\nfor i in 1:5\n    println(readline(input_data))\nend\nclose(input_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nseeds: 630335678 71155519 260178142 125005421 1548082684 519777283 4104586697 30692976 1018893962 410959790 3570781652 45062110 74139777 106006724 3262608046 213460151 3022784256 121993130 2138898608 36769984\n\nseed-to-soil map:\n2977255263 3423361099 161177662\n3464809483 1524036300 40280620\n```\n:::\n:::\n\n\n## Part 1\n\nFirst, we need to extract the different mappings from this one file.\n\nLet's get all the seed numbers (our input):\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ninput_data = open(input_file, \"r\");\n\nseeds = readline(input_data) |>\n    x -> (split(x, \" \"))[2:end] |>\n    x -> parse.(Int64, x)\n```\n\n::: {#which_seeds .cell-output .cell-output-display execution_count=4}\n```\n20-element Vector{Int64}:\n  630335678\n   71155519\n  260178142\n  125005421\n 1548082684\n  519777283\n 4104586697\n   30692976\n 1018893962\n  410959790\n 3570781652\n   45062110\n   74139777\n  106006724\n 3262608046\n  213460151\n 3022784256\n  121993130\n 2138898608\n   36769984\n```\n:::\n:::\n\n\n...and then all the maps in one String:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nall_maps = read(input_data, String);\nclose(input_data)\n```\n:::\n\n\n...so that we can split:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nsplit_maps = split(all_maps, \"\\n\\n\")\n\nall_maps_names = String[];\nall_maps_data = DataFrame[];\nfor each_map in split_maps\n    map_name , map_data = split(each_map, \":\\n\");\n    # get the name without explicit \" map\"\n    map_name = (strip(map_name))[1:(end - 4)];\n    push!(all_maps_names, map_name);\n\n    map_data = CSV.read(\n        IOBuffer(map_data),\n        DataFrame;\n        header = [\"dest_start\", \"src_start\", \"range\"],\n        delim = \" \"\n    );\n    sort!(map_data, :src_start);\n    map_data = transform(\n        map_data,\n        [:dest_start, :range] =>\n            ((d, r) -> d + r) =>\n        :dest_end,\n        [:src_start, :range] =>\n            ((s, r) -> s + r) =>\n        :src_end\n    );\n    push!(all_maps_data, map_data);\nend\n```\n:::\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=7}\nNow I have all these maps: [\"seed-to-soil\", \"soil-to-fertilizer\", \"fertilizer-to-water\", \"water-to-light\", \"light-to-temperature\", \"temperature-to-humidity\", \"humidity-to-location\"].\n\n:::\n:::\n\n\n### The problem\n\nI need to find which seed goes with which soil, which soil goes with which\nfertilizer, etc. And then, find the smallest location number!\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nfunction get_dest_number(src_number::Int64, map_number::Int64)\n    cur_map = all_maps_data[map_number];\n    filtered_map = subset(cur_map, [:src_start, :src_end] => (x,y) -> x .<= src_number .<= y);\n    if nrow(filtered_map) == 0\n        # the destination number is the same as src number\n        return src_number\n    end\n    offset = src_number - filtered_map.src_start[1];\n    return filtered_map.dest_start[1] + offset\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nget_dest_number (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#get_all_locations .cell execution_count=8}\n``` {.julia .cell-code}\nall_locations = Int64[];\nfor s_number in seeds\n    start_number = s_number;\n    next_number = Int64;\n    for m_number in 1:length(all_maps_names)\n        next_number = get_dest_number(start_number, m_number);\n        start_number = next_number;\n    end\n    push!(all_locations, next_number);\nend\n```\n:::\n\n\n### The solution\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=10}\nThe smallest location is: 51580674.\n\n:::\n:::\n\n\n## Part 2\n\nRange of seeds instead of list of seeds.\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nall_locations = Int64[];\nfor i in 1:2:(lastindex(seeds) - 1)\n    seed_start = seeds[i];\n    seed_range = seeds[i + 1];\n    for s_number in seed_start:(seed_start + seed_range)\n        start_number = s_number;\n        next_number = Int64;\n        for m_number in 1:length(all_maps_names)\n            next_number = get_dest_number(start_number, m_number);\n            start_number = next_number;\n        end\n        push!(all_locations, next_number);\n    end\nend\n```\n:::\n\n\nThis solution takes too much time to run!\n\n",
    "supporting": [
      "Day_05_files"
    ],
    "filters": [],
    "includes": {}
  }
}