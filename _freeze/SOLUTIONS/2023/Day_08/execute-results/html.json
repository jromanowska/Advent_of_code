{
  "hash": "e2c2d23ee0a1dc619274f73908f24e78",
  "result": {
    "markdown": "---\ntitle: Day 8\nauthor: Julia Romanowska\n---\n\n\n## The input\n\nFirst line are the directions. Afterwards, there are \"nodes\".\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day08.txt\");\n#input_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"example_input_day08.txt\");\ninput_data = read(open(input_file, \"r\"), String);\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ndirections , nodes_raw = split(input_data, \"\\n\\n\");\nnodes = CSV.read(\n    IOBuffer(nodes_raw),\n    DataFrame;\n    header = [\"name\", \"value\"],\n    delim = \" = \"\n)\n```\n\n::: {#extract_instructions .cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><div style = \"float: left;\"><span>702×2 DataFrame</span></div><div style = \"float: right;\"><span style = \"font-style: italic;\">677 rows omitted</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">name</th><th style = \"text-align: left;\">value</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String3\" style = \"text-align: left;\">String3</th><th title = \"String15\" style = \"text-align: left;\">String15</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">NFK</td><td style = \"text-align: left;\">(LMH, RSS)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">SLJ</td><td style = \"text-align: left;\">(NBT, CDG)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">SKX</td><td style = \"text-align: left;\">(SRC, KKX)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">LRB</td><td style = \"text-align: left;\">(MNG, FSH)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">QMQ</td><td style = \"text-align: left;\">(DMG, QRV)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">VRB</td><td style = \"text-align: left;\">(PGG, PRG)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">QNB</td><td style = \"text-align: left;\">(PFD, FFQ)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">BPK</td><td style = \"text-align: left;\">(GFF, DFF)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">JTD</td><td style = \"text-align: left;\">(NVV, VLD)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">PXD</td><td style = \"text-align: left;\">(VNV, BDS)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">PXP</td><td style = \"text-align: left;\">(VFH, DLR)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">XRH</td><td style = \"text-align: left;\">(QMM, LDH)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">GLV</td><td style = \"text-align: left;\">(SDM, MFS)</td></tr><tr><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">691</td><td style = \"text-align: left;\">VVS</td><td style = \"text-align: left;\">(DJF, VFF)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">692</td><td style = \"text-align: left;\">QHG</td><td style = \"text-align: left;\">(BQK, JHJ)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">693</td><td style = \"text-align: left;\">SLT</td><td style = \"text-align: left;\">(PMX, HSS)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">694</td><td style = \"text-align: left;\">PDN</td><td style = \"text-align: left;\">(KLX, DXM)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">695</td><td style = \"text-align: left;\">DLT</td><td style = \"text-align: left;\">(XHV, PMS)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">696</td><td style = \"text-align: left;\">KKN</td><td style = \"text-align: left;\">(FTF, FCX)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">697</td><td style = \"text-align: left;\">BLX</td><td style = \"text-align: left;\">(QHG, LHJ)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">698</td><td style = \"text-align: left;\">GQH</td><td style = \"text-align: left;\">(VDG, PQN)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">699</td><td style = \"text-align: left;\">VLD</td><td style = \"text-align: left;\">(FGX, HVF)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">700</td><td style = \"text-align: left;\">KKX</td><td style = \"text-align: left;\">(GQT, QXD)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">701</td><td style = \"text-align: left;\">KKJ</td><td style = \"text-align: left;\">(BGQ, LFM)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">702</td><td style = \"text-align: left;\">LNJ</td><td style = \"text-align: left;\">(FNL, HMG)</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Part 1\n\n### The problem\n\nI can create a dictionary of pairs.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nfunction create_pairs(s::AbstractString)\n    m = match(r\"\\((?<left>\\w+), (?<right>\\w+)\\)\", s);\n    return (m[\"left\"], m[\"right\"])\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ncreate_pairs (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ntransform!(\n    nodes,\n    :value => ByRow(create_pairs) => :value\n)\nnodes_dict = Dict(zip(nodes.name, nodes.value))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nDict{String3, Tuple{SubString{String}, SubString{String}}} with 702 entries:\n  \"LFQ\" => (\"LSB\", \"RLM\")\n  \"DRR\" => (\"NFK\", \"TKJ\")\n  \"FHF\" => (\"VCB\", \"BKJ\")\n  \"GQT\" => (\"NRN\", \"GLV\")\n  \"TKL\" => (\"KCR\", \"XCT\")\n  \"HTL\" => (\"CBJ\", \"BFM\")\n  \"CGB\" => (\"RLV\", \"DPR\")\n  \"VGB\" => (\"MRC\", \"XPH\")\n  \"GNL\" => (\"HNK\", \"QQJ\")\n  \"XQQ\" => (\"QNL\", \"XXJ\")\n  \"RHM\" => (\"TFS\", \"TQL\")\n  \"CHQ\" => (\"JDC\", \"MRB\")\n  \"PTK\" => (\"CMJ\", \"KDK\")\n  \"FCX\" => (\"RLJ\", \"TQN\")\n  \"PMB\" => (\"PJX\", \"LTG\")\n  \"LRK\" => (\"CKB\", \"HXV\")\n  \"KNP\" => (\"FFB\", \"SSB\")\n  \"KSV\" => (\"HGD\", \"SBH\")\n  \"VFF\" => (\"CLD\", \"NGD\")\n  \"VRR\" => (\"TGC\", \"MTP\")\n  \"LRD\" => (\"XHC\", \"PBG\")\n  \"PKR\" => (\"RSQ\", \"SBS\")\n  \"SKX\" => (\"SRC\", \"KKX\")\n  \"CTR\" => (\"XBB\", \"VRB\")\n  \"GGJ\" => (\"GXB\", \"MPF\")\n  ⋮     => ⋮\n```\n:::\n:::\n\n\nAnd then, I need the sequence of directions.\n\n### The solution\n\nHow many steps from \"AAA\" to \"ZZZ\"?\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nfunction check_directions(c::Char)\n    if c == 'L'\n        return 1\n    end\n    return 2\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ncheck_directions (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nstart_node = \"AAA\";\nend_node = \"ZZZ\";\nsteps = 0;\ndirection_no = 1;\n\ncur_node = start_node;\nwhile cur_node != end_node\n    cur_direction = check_directions(directions[direction_no]);\n    global cur_node = nodes_dict[cur_node][cur_direction];\n    global steps += 1;\n    global direction_no += 1;\n    if direction_no == lastindex(directions) + 1\n        global direction_no = 1;\n    end\nend\n```\n:::\n\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=9}\nThe trip takes: 19783 steps.\n\n:::\n:::\n\n\n",
    "supporting": [
      "Day_08_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}