{
  "hash": "5010f4cbb54d11794b4e9a0ccf7151af",
  "result": {
    "markdown": "---\ntitle: Day 6\nauthor: Julia Romanowska\n---\n\n\n## The input\n\nThe races' times and distances:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day06.txt\");\ninput_data = read(open(input_file, \"r\"), String);\nprintln(input_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime:        58     81     96     76\nDistance:   434   1041   2219   1218\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ntime_line , dist_line = split(input_data, \"\\n\")[1:2]\ntimes = split(time_line, r\"\\s+\")[2:end] |>\n    x -> parse.(Int64, x)\ndistances = split(dist_line, r\"\\s+\")[2:end] |>\n    x -> parse.(Int64, x)\n```\n\n::: {#get_data .cell-output .cell-output-display execution_count=4}\n```\n4-element Vector{Int64}:\n  434\n 1041\n 2219\n 1218\n```\n:::\n:::\n\n\n## Part 1\n\n### The problem\n\nFor each race, we can hold the button to charge the boat for varying number of\nmiliseconds but not exceed the maximum time given in the input file. With each \nmilisecond of holding the button, the boat gains 1ms/mm velocity.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nfunction find_max_dist(time_hold_button::Int64, max_time::Int64)\n    return (max_time - time_hold_button)*time_hold_button\nend\n```\n\n::: {#function_max_dist .cell-output .cell-output-display execution_count=5}\n```\nfind_max_dist (generic function with 1 method)\n```\n:::\n:::\n\n\n### The solution\n\nWe need to find the number of ways we can get larger distance than what is in\nthe input file.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nall_winning_approaches = Int64[];\nfor idx in 1:lastindex(times)\n    cur_max_time = times[idx];\n    cur_max_dist = distances[idx];\n    cur_winning_approaches = 0;\n    for t in 1:(cur_max_time - 1)\n        max_dist = find_max_dist(t, cur_max_time)\n        if max_dist > cur_max_dist\n            cur_winning_approaches += 1;\n        end\n    end\n    push!(all_winning_approaches, cur_winning_approaches);\nend\n```\n:::\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=7}\nThe total number of ways to win all the races: 1159152.\n\n:::\n:::\n\n\n## Part 2\n\nInstead of the input showing many races, it's actually one!\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\none_time = parse(Int64, string(times...))\none_distance = parse(Int64, string(distances...))\n\ncur_winning_approaches = 0;\nfor t in 1:(one_time - 1)\n    max_dist = find_max_dist(t, one_time)\n    if max_dist > one_distance\n        cur_winning_approaches += 1;\n    end\nend\n```\n:::\n\n\n### The solution\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=9}\nThe total number of ways to win the long race: 41513103.\n\n:::\n:::\n\n\n",
    "supporting": [
      "Day_06_files"
    ],
    "filters": [],
    "includes": {}
  }
}