{
  "hash": "d32091ab0ceea64a4a8917abe9c9704b",
  "result": {
    "markdown": "---\ntitle: Day 1\nauthor: Julia Romanowska\n---\n\n\n## The input\n\nThere are some numbers in each line, hidden between characters.\n\n\n```{bash}\ndata_in=\"../../DATA/2023/input_day01.txt\"\nhead $data_in\nwc -l $data_in\n```\n\n\n## PART 1\n\n### The puzzle\n\nI need to find the numbers in each line and re-create them. Next, I need to add\nup all the numbers in the document.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ninput_file = open(\"../../DATA/2023/input_day01.txt\", \"r\");\nline = readline(input_file);\n\nall_numbers = Int32[];\nwhile line != \"\"\n    split_line = split(line, \"\");\n    current_numbers = [];\n    for sign ∈ split_line\n        try\n            push!(current_numbers, parse(Int, sign));\n        catch err\n        end\n    end\n    out_number = parse(\n        Int,\n        string(first(current_numbers), last(current_numbers))\n    )\n    push!(all_numbers, out_number);\n\n    # read the next line:\n    global line = readline(input_file);\nend\n\nclose(input_file);\n```\n:::\n\n\n### The solution\n\nNow, I have all the numbers:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nall_numbers\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1000-element Vector{Int32}:\n 22\n 99\n 16\n 77\n 66\n 54\n 22\n 72\n 66\n 15\n 25\n 41\n 73\n  ⋮\n 76\n 14\n 79\n 15\n 16\n 33\n 34\n 72\n 11\n 37\n 72\n 26\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=5}\nThe sum of these numbers is 54388.\n\n:::\n:::\n\n\n## PART 2\n\nThe task is more difficult than I thought! :D\n\nThe numbers can also be spelled: `one`, `two`, `three`, `four`, `five`, `six`,\n`seven`, `eight`, or `nine`.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ninput_file = open(\"../../DATA/2023/input_day01.txt\", \"r\");\nline = readline(input_file);\n\nall_numbers = Int32[];\nall_spelled_numbers = Dict(\n    \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5,\n    \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9\n);\nwhile line != \"\"\n    current_numbers = DataFrame(\n        index = -1;\n        number = -1\n    );\n    # first - check spelled numbers\n    for spelled_num ∈ keys(all_spelled_numbers)\n        if occursin(spelled_num, line)\n            first_idx = first(findfirst(spelled_num, line));\n            last_idx = first(findlast(spelled_num, line));\n            cur_number = all_spelled_numbers[spelled_num];\n            if first_idx != last_idx\n                append!(current_numbers, DataFrame(\n                    index = [first_idx, last_idx],\n                    number = [cur_number, cur_number]\n                ));\n            else\n                append!(current_numbers, DataFrame(\n                    index = first_idx,\n                    number = cur_number\n                ));\n            end\n        end\n    end\n    # then - check digits\n    for digit_num ∈ values(all_spelled_numbers)\n        if occursin(string(digit_num), line)\n            first_idx = first(findfirst(string(digit_num), line));\n            last_idx = first(findlast(string(digit_num), line));\n            if first_idx != last_idx\n                append!(current_numbers, DataFrame(\n                    index = [first_idx, last_idx],\n                    number = [digit_num, digit_num]\n                ));\n            else\n                append!(current_numbers, DataFrame(\n                    index = first_idx,\n                    number = digit_num\n                ));\n            end\n        end\n    end\n\n    # first row was used only to set the types of columns correctly\n    deleteat!(current_numbers, 1)\n    sort!(current_numbers, order(:index))\n    out_number = parse(Int, string(first(current_numbers.number), last(current_numbers.number)))\n    push!(all_numbers, out_number);\n\n    # read the next line:\n    global line = readline(input_file);\nend\n\nclose(input_file);\n```\n:::\n\n\n### The solution\n\nNow, I have all the numbers:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nall_numbers\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n1000-element Vector{Int32}:\n 32\n 19\n 16\n 16\n 16\n 55\n 72\n 52\n 86\n 25\n 18\n 46\n 53\n  ⋮\n 75\n 94\n 19\n 14\n 16\n 33\n 34\n 77\n 91\n 87\n 58\n 26\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=8}\nThe sum of these numbers is 53515.\n\n:::\n:::\n\n\n",
    "supporting": [
      "Day_01_files"
    ],
    "filters": [],
    "includes": {}
  }
}