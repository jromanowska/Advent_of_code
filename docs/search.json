[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Choose year:\n\n2023\n2022"
  },
  {
    "objectID": "YEARS/2023.html",
    "href": "YEARS/2023.html",
    "title": "Year 2023",
    "section": "",
    "text": "My take on the puzzles in 2023 edition of Advent of Code.\n\n\n\n1\n\n\n\n\n2\n\n\n\n\n3\n\n\n\n\n4\n\n\n\n\n5\n\n\n\n\n6\n\n\n\n\n7\n\n\n\n\n8\n\n\n\n\n9\n\n\n\n\n10\n\n\n\n\n11\n\n\n\n\n12\n\n\n\n\n13\n\n\n\n\n14\n\n\n\n\n15\n\n\n\n\n16\n\n\n\n\n17\n\n\n\n\n18\n\n\n\n\n19\n\n\n\n\n20\n\n\n\n\n21\n\n\n\n\n22\n\n\n\n\n23\n\n\n\n\n24"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_05.html",
    "href": "SOLUTIONS/2023/Day_05.html",
    "title": "Day 5",
    "section": "",
    "text": "There are several maps hidden in the file. All this mapping helps find out how to plant the new seeds.\n\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day05.txt\");\ninput_data = open(input_file, \"r\");\nfor i in 1:5\n    println(readline(input_data))\nend\nclose(input_data)\n\nseeds: 630335678 71155519 260178142 125005421 1548082684 519777283 4104586697 30692976 1018893962 410959790 3570781652 45062110 74139777 106006724 3262608046 213460151 3022784256 121993130 2138898608 36769984\n\nseed-to-soil map:\n2977255263 3423361099 161177662\n3464809483 1524036300 40280620"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_05.html#the-input",
    "href": "SOLUTIONS/2023/Day_05.html#the-input",
    "title": "Day 5",
    "section": "",
    "text": "There are several maps hidden in the file. All this mapping helps find out how to plant the new seeds.\n\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day05.txt\");\ninput_data = open(input_file, \"r\");\nfor i in 1:5\n    println(readline(input_data))\nend\nclose(input_data)\n\nseeds: 630335678 71155519 260178142 125005421 1548082684 519777283 4104586697 30692976 1018893962 410959790 3570781652 45062110 74139777 106006724 3262608046 213460151 3022784256 121993130 2138898608 36769984\n\nseed-to-soil map:\n2977255263 3423361099 161177662\n3464809483 1524036300 40280620"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_05.html#part-1",
    "href": "SOLUTIONS/2023/Day_05.html#part-1",
    "title": "Day 5",
    "section": "Part 1",
    "text": "Part 1\nFirst, we need to extract the different mappings from this one file.\nLet’s get all the seed numbers (our input):\n\ninput_data = open(input_file, \"r\");\n\nseeds = readline(input_data) |&gt;\n    x -&gt; (split(x, \" \"))[2:end] |&gt;\n    x -&gt; parse.(Int64, x)\n\n20-element Vector{Int64}:\n  630335678\n   71155519\n  260178142\n  125005421\n 1548082684\n  519777283\n 4104586697\n   30692976\n 1018893962\n  410959790\n 3570781652\n   45062110\n   74139777\n  106006724\n 3262608046\n  213460151\n 3022784256\n  121993130\n 2138898608\n   36769984\n\n\n…and then all the maps in one String:\n\nall_maps = read(input_data, String);\nclose(input_data)\n\n…so that we can split:\n\nsplit_maps = split(all_maps, \"\\n\\n\")\n\nall_maps_names = String[];\nall_maps_data = DataFrame[];\nfor each_map in split_maps\n    map_name , map_data = split(each_map, \":\\n\");\n    # get the name without explicit \" map\"\n    map_name = (strip(map_name))[1:(end - 4)];\n    push!(all_maps_names, map_name);\n\n    map_data = CSV.read(\n        IOBuffer(map_data),\n        DataFrame;\n        header = [\"dest_start\", \"src_start\", \"range\"],\n        delim = \" \"\n    );\n    sort!(map_data, :src_start);\n    map_data = transform(\n        map_data,\n        [:dest_start, :range] =&gt;\n            ((d, r) -&gt; d + r) =&gt;\n        :dest_end,\n        [:src_start, :range] =&gt;\n            ((s, r) -&gt; s + r) =&gt;\n        :src_end\n    );\n    push!(all_maps_data, map_data);\nend\n\n\n\nNow I have all these maps: [“seed-to-soil”, “soil-to-fertilizer”, “fertilizer-to-water”, “water-to-light”, “light-to-temperature”, “temperature-to-humidity”, “humidity-to-location”].\n\n\n\nThe problem\nI need to find which seed goes with which soil, which soil goes with which fertilizer, etc. And then, find the smallest location number!\n\nfunction get_dest_number(src_number::Int64, map_number::Int64)\n    cur_map = all_maps_data[map_number];\n    filtered_map = subset(cur_map, [:src_start, :src_end] =&gt; (x,y) -&gt; x .&lt;= src_number .&lt;= y);\n    if nrow(filtered_map) == 0\n        # the destination number is the same as src number\n        return src_number\n    end\n    offset = src_number - filtered_map.src_start[1];\n    return filtered_map.dest_start[1] + offset\nend\n\nget_dest_number (generic function with 1 method)\n\n\n\nall_locations = Int64[];\nfor s_number in seeds\n    start_number = s_number;\n    next_number = Int64;\n    for m_number in 1:length(all_maps_names)\n        next_number = get_dest_number(start_number, m_number);\n        start_number = next_number;\n    end\n    push!(all_locations, next_number);\nend\n\n\n\nThe solution\n\n\nThe smallest location is: 51580674."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_05.html#part-2",
    "href": "SOLUTIONS/2023/Day_05.html#part-2",
    "title": "Day 5",
    "section": "Part 2",
    "text": "Part 2\nRange of seeds instead of list of seeds.\n\nall_locations = Int64[];\nfor i in 1:2:(lastindex(seeds) - 1)\n    seed_start = seeds[i];\n    seed_range = seeds[i + 1];\n    for s_number in seed_start:(seed_start + seed_range)\n        start_number = s_number;\n        next_number = Int64;\n        for m_number in 1:length(all_maps_names)\n            next_number = get_dest_number(start_number, m_number);\n            start_number = next_number;\n        end\n        push!(all_locations, next_number);\n    end\nend\n\nThis solution takes too much time to run!"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_03.html",
    "href": "SOLUTIONS/2023/Day_03.html",
    "title": "Day 3",
    "section": "",
    "text": "Each line consists of symbols and digits. Digits form numbers, delimited by either . (full stop) or another symbol. A number is part of the engine if it is adjacent to any symbol other than . (even diagonally).\n\n#input_file = open(\"../../DATA/2023/input_day03.txt\", \"r\");\ninput_file = open(\"../../DATA/2023/example_input_day03.txt\", \"r\");\nprintln(peek(input_file, String))\n\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598.."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_03.html#the-input",
    "href": "SOLUTIONS/2023/Day_03.html#the-input",
    "title": "Day 3",
    "section": "",
    "text": "Each line consists of symbols and digits. Digits form numbers, delimited by either . (full stop) or another symbol. A number is part of the engine if it is adjacent to any symbol other than . (even diagonally).\n\n#input_file = open(\"../../DATA/2023/input_day03.txt\", \"r\");\ninput_file = open(\"../../DATA/2023/example_input_day03.txt\", \"r\");\nprintln(peek(input_file, String))\n\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598.."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_03.html#part-1",
    "href": "SOLUTIONS/2023/Day_03.html#part-1",
    "title": "Day 3",
    "section": "Part 1",
    "text": "Part 1\nWhat I need to do is:\n\nfind all the numbers and their positions (line number and column number)\nfind all the symbols that are not . and their positions\ncheck positions of numbers against positions of symbols (a la rolling join)\n\n\nFind all the numbers and symbols, and their positions\n\nall_numbers_positions = DataFrame(\n    cur_number = 0,\n    line_no = 0,\n    column_start = 0,\n    column_end = 0\n);\n\nall_symbols_positions = DataFrame(\n    cur_symbol = 0,\n    line_no = 0,\n    column_pos = 0\n);\n\n\nfunction match_all(pattern::Regex, where_to_match::String)\n    all_positions = Int32[];\n    all_matches = String[];\n    idx = 1;\n    while idx &lt; lastindex(where_to_match)\n        m = match(pattern, where_to_match, idx);\n        if isnothing(m)\n            break\n        end\n        push!(all_positions, m.offset);\n        push!(all_matches, m.match);\n        idx = m.offset + 1;\n    end\n    return DataFrame(\n        cur_number = all_matches,\n        cur_position = all_positions\n    )\nend\n\nmatch_all (generic function with 1 method)\n\n\n\nline = readline(input_file);\ncur_line_no = 1;\nwhile line != \"\"\n    # find digits...\n    cur_line_numbers_found = match_all(r\"\\d\", line);\n    # and make them into numbers\n    #   find difference in position from the previous digit:\n    diff_numbers_positions = [2; diff(cur_line_numbers_found.cur_position)];\n    # the next will be simpler if I create groups based on the position\n    cur_group = 0;\n    groups = Int32[];\n    for idx in diff_numbers_positions\n        if idx != 1\n            global cur_group += 1;\n        end\n        push!(groups, cur_group);\n    end\n    cur_line_numbers_found[:, :group_no] = groups;\n    #   find beginning and end of each number:\n    cur_numbers_out = combine(\n        groupby(cur_line_numbers_found, :group_no),\n        [:cur_number, :cur_position] =&gt;\n         ((n, p) -&gt; (cur_number = parse(Int32, string(n...)),\n                    column_start = min(p...),\n                    column_end = max(p...))) =&gt;\n         AsTable\n    );\n    cur_numbers_out[:, :line_no] = fill(cur_line_no, nrow(cur_numbers_out));\n    select!(cur_numbers_out, Not(:group_no));\n    #  finally, add to the big table\n    append!(all_numbers_positions, cur_numbers_out);\n\n    # find symbols...\n    cur_line_symbols_found = match_all(r\"[^\\d.]\", line);\n    # and place in the DataFrame\n    append!(\n        all_symbols_positions,\n        DataFrame(\n            cur_symbol = cur_line_symbols_found.cur_number,\n            line_no = fill(cur_line_no, nrow(cur_line_symbols_found)),\n            column_pos = cur_line_symbols_found.cur_position\n        )\n    )\n\n    # read the next line:\n    global line = readline(input_file);\n    global cur_line_no =+ 1;\nend\n\nclose(input_file)\n\nLoadError: syntax: `global cur_group`: cur_group is a local variable in its enclosing scope"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_01.html",
    "href": "SOLUTIONS/2023/Day_01.html",
    "title": "Day 1",
    "section": "",
    "text": "There are some numbers in each line, hidden between characters.\ndata_in=\"../../DATA/2023/input_day01.txt\"\nhead $data_in\nwc -l $data_in"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_01.html#the-input",
    "href": "SOLUTIONS/2023/Day_01.html#the-input",
    "title": "Day 1",
    "section": "",
    "text": "There are some numbers in each line, hidden between characters.\ndata_in=\"../../DATA/2023/input_day01.txt\"\nhead $data_in\nwc -l $data_in"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_01.html#part-1",
    "href": "SOLUTIONS/2023/Day_01.html#part-1",
    "title": "Day 1",
    "section": "PART 1",
    "text": "PART 1\n\nThe puzzle\nI need to find the numbers in each line and re-create them. Next, I need to add up all the numbers in the document.\n\ninput_file = open(\"../../DATA/2023/input_day01.txt\", \"r\");\nline = readline(input_file);\n\nall_numbers = Int32[];\nwhile line != \"\"\n    split_line = split(line, \"\");\n    current_numbers = [];\n    for sign ∈ split_line\n        try\n            push!(current_numbers, parse(Int, sign));\n        catch err\n        end\n    end\n    out_number = parse(\n        Int,\n        string(first(current_numbers), last(current_numbers))\n    )\n    push!(all_numbers, out_number);\n\n    # read the next line:\n    global line = readline(input_file);\nend\n\nclose(input_file);\n\n\n\nThe solution\nNow, I have all the numbers:\n\nall_numbers\n\n1000-element Vector{Int32}:\n 22\n 99\n 16\n 77\n 66\n 54\n 22\n 72\n 66\n 15\n 25\n 41\n 73\n  ⋮\n 76\n 14\n 79\n 15\n 16\n 33\n 34\n 72\n 11\n 37\n 72\n 26\n\n\n\n\nThe sum of these numbers is 54388."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_01.html#part-2",
    "href": "SOLUTIONS/2023/Day_01.html#part-2",
    "title": "Day 1",
    "section": "PART 2",
    "text": "PART 2\nThe task is more difficult than I thought! :D\nThe numbers can also be spelled: one, two, three, four, five, six, seven, eight, or nine.\n\ninput_file = open(\"../../DATA/2023/input_day01.txt\", \"r\");\nline = readline(input_file);\n\nall_numbers = Int32[];\nall_spelled_numbers = Dict(\n    \"one\" =&gt; 1, \"two\" =&gt; 2, \"three\" =&gt; 3, \"four\" =&gt; 4, \"five\" =&gt; 5,\n    \"six\" =&gt; 6, \"seven\" =&gt; 7, \"eight\" =&gt; 8, \"nine\" =&gt; 9\n);\nwhile line != \"\"\n    current_numbers = DataFrame(\n        index = -1;\n        number = -1\n    );\n    # first - check spelled numbers\n    for spelled_num ∈ keys(all_spelled_numbers)\n        if occursin(spelled_num, line)\n            first_idx = first(findfirst(spelled_num, line));\n            last_idx = first(findlast(spelled_num, line));\n            cur_number = all_spelled_numbers[spelled_num];\n            if first_idx != last_idx\n                append!(current_numbers, DataFrame(\n                    index = [first_idx, last_idx],\n                    number = [cur_number, cur_number]\n                ));\n            else\n                append!(current_numbers, DataFrame(\n                    index = first_idx,\n                    number = cur_number\n                ));\n            end\n        end\n    end\n    # then - check digits\n    for digit_num ∈ values(all_spelled_numbers)\n        if occursin(string(digit_num), line)\n            first_idx = first(findfirst(string(digit_num), line));\n            last_idx = first(findlast(string(digit_num), line));\n            if first_idx != last_idx\n                append!(current_numbers, DataFrame(\n                    index = [first_idx, last_idx],\n                    number = [digit_num, digit_num]\n                ));\n            else\n                append!(current_numbers, DataFrame(\n                    index = first_idx,\n                    number = digit_num\n                ));\n            end\n        end\n    end\n\n    # first row was used only to set the types of columns correctly\n    deleteat!(current_numbers, 1)\n    sort!(current_numbers, order(:index))\n    out_number = parse(Int, string(first(current_numbers.number), last(current_numbers.number)))\n    push!(all_numbers, out_number);\n\n    # read the next line:\n    global line = readline(input_file);\nend\n\nclose(input_file);\n\n\nThe solution\nNow, I have all the numbers:\n\nall_numbers\n\n1000-element Vector{Int32}:\n 32\n 19\n 16\n 16\n 16\n 55\n 72\n 52\n 86\n 25\n 18\n 46\n 53\n  ⋮\n 75\n 94\n 19\n 14\n 16\n 33\n 34\n 77\n 91\n 87\n 58\n 26\n\n\n\n\nThe sum of these numbers is 53515."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_7.html",
    "href": "SOLUTIONS/2022/Day_7.html",
    "title": "Day 7",
    "section": "",
    "text": "List of commands and output from terminal, used to determine the size of files in each directory.\n\ninput_file &lt;- here(\"DATA\", \"2022\", \"input_day_07.txt\")\nscan(\n  input_file,\n  what = \"character\",\n  sep = \"\\n\",\n  nmax = 10\n) %&gt;% cat(sep = \"\\n\")\n\n$ cd /\n$ ls\ndir gqlg\ndir hchrwstr\ndir lswlpt\n189381 mzsnhlf\ndir plmdrbn\ndir rjwmjd\ndir stqq\n93174 zfn\n\n\nI will construct a structure to hold all the information:\n\nall the directories will be held in one list,\neach directory is a list, holding:\n\npointer to the parent directory,\npointers to children-directories,\nlist of files"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_7.html#data",
    "href": "SOLUTIONS/2022/Day_7.html#data",
    "title": "Day 7",
    "section": "",
    "text": "List of commands and output from terminal, used to determine the size of files in each directory.\n\ninput_file &lt;- here(\"DATA\", \"2022\", \"input_day_07.txt\")\nscan(\n  input_file,\n  what = \"character\",\n  sep = \"\\n\",\n  nmax = 10\n) %&gt;% cat(sep = \"\\n\")\n\n$ cd /\n$ ls\ndir gqlg\ndir hchrwstr\ndir lswlpt\n189381 mzsnhlf\ndir plmdrbn\ndir rjwmjd\ndir stqq\n93174 zfn\n\n\nI will construct a structure to hold all the information:\n\nall the directories will be held in one list,\neach directory is a list, holding:\n\npointer to the parent directory,\npointers to children-directories,\nlist of files"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_7.html#functions",
    "href": "SOLUTIONS/2022/Day_7.html#functions",
    "title": "Day 7",
    "section": "Functions",
    "text": "Functions\nI will need several small functions:\n\ncd / - this is starting from top; this is used only once in the input, so I can ignore this line\ncd .. - go up in the list-levels\n\n\ngo_up &lt;- function(cur_level){\n  cur_level &lt;&lt;- all_dirs[[cur_level$level_up]]\n}\n\n\ncd xxx - go down in the list-levels, to the list named xxx\n\n\ngo_down &lt;- function(cur_level, new_level){\n  cur_level &lt;&lt;- all_dirs[[new_level]]\n}\n\n\nls - list everything, read all the lines until next one that starts with $ and do one of the following actions:\n\ndir xxx - create a list named xxx\n\n\n\ncreate_level &lt;- function(cur_level, new_name){\n  # new level needs to contain list of files within this dir., and reference\n  #  to the level up\n  new_list &lt;- list(\n    list(\n      files = list(),\n      level_up = cur_level$name,\n      name = paste0(cur_level$name, \"/\", new_name),\n      children = c()\n    )\n  )\n  names(new_list) &lt;- paste0(cur_level$name, \"/\", new_name)\n  \n  # update children\n  all_dirs[[cur_level$name]]$children &lt;- c(\n    all_dirs[[cur_level$name]]$children, new_name\n  )\n  # append new list\n  all_dirs &lt;&lt;- c(\n    all_dirs,\n    new_list\n  )\n}\n\n- `123 xxx` - add element to the 'files' list in the current list, with\n`123` as the value (size of the file)\n\ncreate_element &lt;- function(cur_level, new_el, new_name){\n  new_list &lt;- list(as.numeric(new_el))\n  names(new_list) &lt;- new_name\n  cur_level_name &lt;- cur_level$name\n  \n  all_dirs[[cur_level_name]]$files &lt;&lt;- c(\n    all_dirs[[cur_level_name]]$files, new_list\n  )\n  # update the pointer\n  cur_level &lt;&lt;- all_dirs[[cur_level_name]]\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_7.html#test",
    "href": "SOLUTIONS/2022/Day_7.html#test",
    "title": "Day 7",
    "section": "Test",
    "text": "Test\nI will test it on the example input.\n\n(exmpl_input &lt;- scan(\n  here(\"DATA\", \"2022\", \"small_input_day_07.txt\"),\n  what = \"character\",\n  sep = \"\\n\"\n)) %&gt;% cat(sep = \"\\n\")\n\n$ cd /\n$ ls\ndir a\n14848514 b.txt\n8504156 c.dat\ndir d\n$ cd a\n$ ls\ndir e\n29116 f\n2557 g\n62596 h.lst\n$ cd e\n$ ls\ndir z\n584 i\n$ cd z\n$ ls\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd d\n$ ls\n4060174 j\n8033020 d.log\n5626152 d.ext\n7214296 k\n\nexmpl_input &lt;- exmpl_input[-1]\n\nnew_list &lt;- list(\n  list(\n    files = list(),\n    level_up = NULL,\n    name = \"start\",\n    children = c()\n  )\n)\nnames(new_list) &lt;- \"start\"\nall_dirs &lt;- new_list\ncur_level &lt;- all_dirs$start\n\n\nfor(cur_line in exmpl_input){\n  cur_line_elements &lt;- str_split(cur_line, pattern = \" \") %&gt;% unlist()\n  if(cur_line_elements[1] == \"$\"){\n    # check whether it's 'ls' or 'cd'\n    if(cur_line_elements[2] == \"cd\"){\n      # go level up or down\n      if(cur_line_elements[3] == \"..\"){\n        cat(\"go up\\n\")\n        go_up(cur_level)\n        next\n      }\n      cat(\"go down to\", paste0(cur_level$name, \"/\", cur_line_elements[3]), \"\\n\")\n      go_down(cur_level, paste0(cur_level$name, \"/\", cur_line_elements[3]))\n      next\n    }\n    next\n  } else {\n    if(cur_line_elements[1] == \"dir\"){\n      cat(\"create level: \", cur_line_elements[2], \"\\n\")\n      create_level(cur_level, cur_line_elements[2])\n      next\n    }\n    # this means that it's the size of the file in this directory\n    cat(\"create element: \", cur_line_elements[1:2], \"\\n\")\n    create_element(cur_level, cur_line_elements[1], cur_line_elements[2])\n  }\n}\n\ncreate level:  a \ncreate element:  14848514 b.txt \ncreate element:  8504156 c.dat \ncreate level:  d \ngo down to start/a \ncreate level:  e \ncreate element:  29116 f \ncreate element:  2557 g \ncreate element:  62596 h.lst \ngo down to start/a/e \ncreate level:  z \ncreate element:  584 i \ngo down to start/a/e/z \ngo up\ngo up\ngo up\ngo down to start/d \ncreate element:  4060174 j \ncreate element:  8033020 d.log \ncreate element:  5626152 d.ext \ncreate element:  7214296 k \n\n\nThe directory structure looks like this:\n\nstr(all_dirs)\n\nList of 5\n $ start      :List of 4\n  ..$ files   :List of 2\n  .. ..$ b.txt: num 14848514\n  .. ..$ c.dat: num 8504156\n  ..$ level_up: NULL\n  ..$ name    : chr \"start\"\n  ..$ children: chr [1:2] \"a\" \"d\"\n $ start/a    :List of 4\n  ..$ files   :List of 3\n  .. ..$ f    : num 29116\n  .. ..$ g    : num 2557\n  .. ..$ h.lst: num 62596\n  ..$ level_up: chr \"start\"\n  ..$ name    : chr \"start/a\"\n  ..$ children: chr \"e\"\n $ start/d    :List of 4\n  ..$ files   :List of 4\n  .. ..$ j    : num 4060174\n  .. ..$ d.log: num 8033020\n  .. ..$ d.ext: num 5626152\n  .. ..$ k    : num 7214296\n  ..$ level_up: chr \"start\"\n  ..$ name    : chr \"start/d\"\n  ..$ children: NULL\n $ start/a/e  :List of 4\n  ..$ files   :List of 1\n  .. ..$ i: num 584\n  ..$ level_up: chr \"start/a\"\n  ..$ name    : chr \"start/a/e\"\n  ..$ children: chr \"z\"\n $ start/a/e/z:List of 4\n  ..$ files   : list()\n  ..$ level_up: chr \"start/a/e\"\n  ..$ name    : chr \"start/a/e/z\"\n  ..$ children: NULL\n\n\nAnd the total size of the elements in each directory:\n\n#' @param cur_dir - path to the directory\nget_sum_size_dir &lt;- function(cur_dir){\n  cur_sum &lt;- 0\n  cur_children &lt;- all_dirs[[cur_dir]]$children\n  if(length(cur_children) != 0){\n    cur_sum &lt;- map_dbl(\n      paste0(cur_dir, \"/\", cur_children),\n      get_sum_size_dir\n    ) %&gt;% sum()\n  }\n  \n  cur_files &lt;- all_dirs[[cur_dir]]$files\n  if(length(cur_files) != 0){\n    cur_sum &lt;- cur_sum + sum(unlist(cur_files))\n  }\n  return(cur_sum)\n}\n\nall_sizes &lt;- map_dbl(all_dirs, function(cur_dir){\n  get_sum_size_dir(cur_dir$name)\n})\nall_sizes\n\n      start     start/a     start/d   start/a/e start/a/e/z \n   48381165       94853    24933642         584           0 \n\n\nWe want to get the directories with size of at most:\n\nmax_dir_size &lt;- 100000\n\n\n\nSo, in the example input, the directories that have size of at most 10^{5} are print(names(all_sizes)[all_sizes &lt; max_dir_size])! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_7.html#real-run",
    "href": "SOLUTIONS/2022/Day_7.html#real-run",
    "title": "Day 7",
    "section": "Real run",
    "text": "Real run\n\n(exmpl_input &lt;- scan(\n  here(\"DATA\", \"2022\", \"input_day_07.txt\"),\n  what = \"character\",\n  sep = \"\\n\"\n)) %&gt;% head(20) %&gt;% cat(sep = \"\\n\")\n\n$ cd /\n$ ls\ndir gqlg\ndir hchrwstr\ndir lswlpt\n189381 mzsnhlf\ndir plmdrbn\ndir rjwmjd\ndir stqq\n93174 zfn\ndir zjhqnlrr\ndir zssdlnc\n$ cd gqlg\n$ ls\n187654 cfrdsjf\n100589 ntvmgbw\n46922 zcmfcjhf.tzw\n$ cd ..\n$ cd hchrwstr\n$ ls\n\nexmpl_input &lt;- exmpl_input[-1]\n\nnew_list &lt;- list(\n  list(\n    files = list(),\n    level_up = NULL,\n    name = \"start\",\n    children = c()\n  )\n)\nnames(new_list) &lt;- \"start\"\nall_dirs &lt;- new_list\ncur_level &lt;- all_dirs$start\n\n\nfor(cur_line in exmpl_input){\n  cur_line_elements &lt;- str_split(cur_line, pattern = \" \") %&gt;% unlist()\n  if(cur_line_elements[1] == \"$\"){\n    # check whether it's 'ls' or 'cd'\n    if(cur_line_elements[2] == \"cd\"){\n      # go level up or down\n      if(cur_line_elements[3] == \"..\"){\n        cat(\"go up\\n\")\n        go_up(cur_level)\n        next\n      }\n      cat(\"go down to\", paste0(cur_level$name, \"/\", cur_line_elements[3]), \"\\n\")\n      go_down(cur_level, paste0(cur_level$name, \"/\", cur_line_elements[3]))\n      next\n    }\n    next\n  } else {\n    if(cur_line_elements[1] == \"dir\"){\n      cat(\"create level: \", cur_line_elements[2], \"\\n\")\n      create_level(cur_level, cur_line_elements[2])\n      next\n    }\n    # this means that it's the size of the file in this directory\n    cat(\"create element: \", cur_line_elements[1:2], \"\\n\")\n    create_element(cur_level, cur_line_elements[1], cur_line_elements[2])\n  }\n}\n\ncreate level:  gqlg \ncreate level:  hchrwstr \ncreate level:  lswlpt \ncreate element:  189381 mzsnhlf \ncreate level:  plmdrbn \ncreate level:  rjwmjd \ncreate level:  stqq \ncreate element:  93174 zfn \ncreate level:  zjhqnlrr \ncreate level:  zssdlnc \ngo down to start/gqlg \ncreate element:  187654 cfrdsjf \ncreate element:  100589 ntvmgbw \ncreate element:  46922 zcmfcjhf.tzw \ngo up\ngo down to start/hchrwstr \ncreate element:  227766 cljjlcp.pjh \ncreate element:  102770 rdbrcf.pjl \ncreate element:  9887 rfnjn.lqn \ncreate level:  rzsrp \ncreate level:  shlhgj \ncreate level:  slwwgc \ngo down to start/hchrwstr/rzsrp \ncreate level:  rzsrp \ngo down to start/hchrwstr/rzsrp/rzsrp \ncreate level:  dvzvmsjz \ncreate element:  208001 tnflwcsn \ncreate level:  zfn \ngo down to start/hchrwstr/rzsrp/rzsrp/dvzvmsjz \ncreate element:  149823 hvgbhm.zsc \ngo up\ngo down to start/hchrwstr/rzsrp/rzsrp/zfn \ncreate element:  292424 gqlg.tzc \ngo up\ngo up\ngo up\ngo down to start/hchrwstr/shlhgj \ncreate element:  61753 fzpzwjdt.jvl \ncreate element:  195204 jjhc.tzr \ncreate element:  288094 zcmfcjhf.tzw \ngo up\ngo down to start/hchrwstr/slwwgc \ncreate element:  118185 jjhc.tzr \ncreate element:  291916 jwnw.wqv \ncreate element:  116377 ptlz \ncreate element:  300849 pzjpw.hwg \ncreate element:  28679 zfn.grz \ngo up\ngo up\ngo down to start/lswlpt \ncreate element:  124160 dbnlt.rqz \ncreate element:  154412 sfd \ngo up\ngo down to start/plmdrbn \ncreate level:  fmzjhrq \ncreate element:  224144 rlc.qns \ncreate element:  2985 zcmfcjhf.tzw \ngo down to start/plmdrbn/fmzjhrq \ncreate element:  9749 lqj.szc \ncreate level:  rrjjsvm \ngo down to start/plmdrbn/fmzjhrq/rrjjsvm \ncreate element:  66652 zcmfcjhf.tzw \ngo up\ngo up\ngo up\ngo down to start/rjwmjd \ncreate level:  twcrf \ncreate element:  125294 zpfws.ctc \ncreate level:  zwmmrqj \ngo down to start/rjwmjd/twcrf \ncreate element:  229364 tnflwcsn \ncreate element:  262716 zcmfcjhf.tzw \ngo up\ngo down to start/rjwmjd/zwmmrqj \ncreate element:  11466 gqlg.ftg \ncreate element:  220272 lflcgss.jrm \ncreate element:  79574 tnflwcsn \ngo up\ngo up\ngo down to start/stqq \ncreate element:  185160 cwjqldbf.cnm \ncreate element:  266439 dpg.pwn \ncreate level:  hpgbcvtb \ncreate element:  139357 jvps \ncreate level:  llbthqc \ncreate element:  250148 mctn.dqw \ncreate level:  rzsrp \ncreate element:  22196 tnflwcsn \ncreate level:  whmdbn \ngo down to start/stqq/hpgbcvtb \ncreate element:  231579 fvjjtd.wdb \ncreate element:  168118 gjdtscqs \ncreate element:  113434 ldbqbg \ncreate level:  mqjfvg \ncreate element:  182214 nnnr \ncreate element:  112389 pqqdt.wnn \ngo down to start/stqq/hpgbcvtb/mqjfvg \ncreate element:  170328 gqlg.jjc \ngo up\ngo up\ngo down to start/stqq/llbthqc \ncreate element:  25611 bftwd.qrr \ncreate element:  91550 tnflwcsn \ngo up\ngo down to start/stqq/rzsrp \ncreate element:  272315 wrsfh.pzd \ncreate element:  123877 zcmfcjhf.tzw \ngo up\ngo down to start/stqq/whmdbn \ncreate element:  29628 jjhc.tzr \ncreate element:  65193 mrhb \ngo up\ngo up\ngo down to start/zjhqnlrr \ncreate level:  bzzvj \ncreate level:  ddzmvh \ncreate level:  dsjd \ncreate element:  180806 fqz.dch \ncreate level:  nnzvl \ncreate element:  109161 rptmqt \ncreate element:  6463 rzsrp.sjf \ncreate element:  111549 rzsrp.wwz \ncreate element:  241532 zfn \ngo down to start/zjhqnlrr/bzzvj \ncreate element:  278759 gqlg.nsn \ncreate element:  174223 mvggzqrq \ncreate element:  156518 tnflwcsn \ncreate level:  wjtlg \ncreate level:  zfn \ngo down to start/zjhqnlrr/bzzvj/wjtlg \ncreate element:  52198 fvqbtm.tch \ncreate element:  44881 tnflwcsn \ngo up\ngo down to start/zjhqnlrr/bzzvj/zfn \ncreate element:  22926 tnflwcsn \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh \ncreate level:  cpvfln \ncreate element:  180764 gqlg.bjq \ncreate level:  hgrnmh \ncreate element:  186254 hgrnmh.tpr \ncreate level:  hjpgf \ncreate level:  mghmb \ncreate level:  pvdwhmcr \ncreate element:  256578 rzsrp \ncreate element:  269955 shlhgj \ncreate element:  172163 vrr.nnm \ngo down to start/zjhqnlrr/ddzmvh/cpvfln \ncreate element:  87025 hgrnmh.lvr \ncreate element:  187453 rwmq.dph \ncreate level:  sthhc \ngo down to start/zjhqnlrr/ddzmvh/cpvfln/sthhc \ncreate element:  289580 fdzwmfnf \ncreate element:  57504 hgrnmh.vqj \ncreate element:  277639 mzcfchr.mch \ncreate level:  slsj \ncreate level:  vsvvprg \ncreate element:  94836 zqglfrl \ngo down to start/zjhqnlrr/ddzmvh/cpvfln/sthhc/slsj \ncreate element:  178013 hdjgtqt \ngo up\ngo down to start/zjhqnlrr/ddzmvh/cpvfln/sthhc/vsvvprg \ncreate element:  102783 fvqbtm.tch \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/hgrnmh \ncreate level:  mrnmbbt \ncreate element:  240216 rzsrp.nfg \ngo down to start/zjhqnlrr/ddzmvh/hgrnmh/mrnmbbt \ncreate element:  245579 gqlg \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/hjpgf \ncreate element:  257544 cjfd.wdq \ncreate element:  296077 jjhc.tzr \ncreate element:  195752 zcmfcjhf.tzw \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb \ncreate level:  bgrcsdc \ncreate level:  btjq \ncreate level:  gqlg \ncreate level:  gtwdqw \ncreate level:  hgrnmh \ncreate level:  jts \ncreate level:  jvp \ncreate level:  jvrjcv \ncreate element:  206272 pgf.rgj \ncreate element:  130746 tnflwcsn \ncreate element:  256698 zfn.dhl \ngo down to start/zjhqnlrr/ddzmvh/mghmb/bgrcsdc \ncreate element:  235762 lflcgss.jrm \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq \ncreate level:  bvrcqb \ncreate level:  drslln \ncreate level:  dwzpblb \ncreate level:  gqlg \ncreate level:  hgrnmh \ncreate level:  hvb \ncreate level:  rqtc \ncreate level:  vsdz \ncreate level:  wrnftqh \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/bvrcqb \ncreate element:  51508 gjjg.msw \ncreate level:  gqlg \ncreate element:  13206 pdwn \ncreate element:  10427 vbw \ncreate element:  6909 zfn.ztq \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/bvrcqb/gqlg \ncreate element:  20816 cmgcvlh.mzs \ncreate element:  10358 fvqbtm.tch \ncreate element:  215142 rzsrp.dns \ncreate element:  192153 wdjdppzm \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/drslln \ncreate element:  258102 tnflwcsn \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/dwzpblb \ncreate element:  302466 fvqbtm.tch \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg \ncreate level:  hnr \ncreate level:  mdzdht \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/hnr \ncreate level:  fjd \ncreate element:  159298 fvqbtm.tch \ncreate element:  46324 gchdll.nrm \ncreate element:  287907 lflcgss.jrm \ncreate level:  mqp \ncreate element:  140272 twdff \ncreate element:  47399 zfn \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/hnr/fjd \ncreate element:  227109 fvqbtm.tch \ncreate element:  223413 wdsfwwwm.rmd \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/hnr/mqp \ncreate level:  rzsrp \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/hnr/mqp/rzsrp \ncreate level:  pgwng \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/hnr/mqp/rzsrp/pgwng \ncreate element:  218271 hgrnmh.gnf \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/mdzdht \ncreate level:  gqlg \ncreate level:  tvd \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/mdzdht/gqlg \ncreate level:  gfjqbdp \ncreate element:  108335 jjhc.tzr \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/mdzdht/gqlg/gfjqbdp \ncreate element:  143536 fzvn.jtv \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/gqlg/mdzdht/tvd \ncreate element:  238491 wsjmrlqv.bwb \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hgrnmh \ncreate element:  265289 lflcgss.jrm \ncreate element:  111283 thb \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hvb \ncreate level:  hgrnmh \ncreate level:  smmwg \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hvb/hgrnmh \ncreate level:  wpvssts \ncreate element:  84939 zcmfcjhf.tzw \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hvb/hgrnmh/wpvssts \ncreate element:  305634 whcmr \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hvb/smmwg \ncreate element:  36722 cvdbwg.rll \ncreate element:  16840 nnhbcbwz \ncreate level:  rzsrp \ncreate element:  9405 zfn.jzr \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hvb/smmwg/rzsrp \ncreate level:  fzsngr \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/hvb/smmwg/rzsrp/fzsngr \ncreate element:  142687 zcmfcjhf.tzw \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc \ncreate level:  pbzhfsg \ncreate level:  rzsrp \ncreate level:  shlhgj \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/pbzhfsg \ncreate element:  41865 hpshz.sdf \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp \ncreate level:  gqlg \ncreate level:  mbsjjzft \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg \ncreate level:  gqlg \ncreate level:  nvjqp \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/gqlg \ncreate element:  21860 tnflwcsn \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/nvjqp \ncreate level:  gcq \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/nvjqp/gcq \ncreate level:  mslhm \ncreate level:  rzsrp \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/nvjqp/gcq/mslhm \ncreate element:  41304 rpgvllw.zfj \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/nvjqp/gcq/rzsrp \ncreate element:  290199 ddsnt \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft \ncreate element:  47727 ggpmg.pps \ncreate level:  stgszvmj \ncreate element:  275954 tnflwcsn \ncreate element:  248613 vbgnwh.sjz \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj \ncreate level:  dthcrbmr \ncreate level:  shlhgj \ncreate element:  206580 zcmfcjhf.tzw \ncreate level:  zfn \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr \ncreate level:  lhp \ncreate level:  npf \ncreate level:  qbgrjr \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr/lhp \ncreate element:  37925 hgrnmh.lvm \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr/npf \ncreate element:  77162 bqvd \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr/qbgrjr \ncreate element:  48767 fvqbtm.tch \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/shlhgj \ncreate level:  wtlngn \ncreate element:  35422 zfn \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/shlhgj/wtlngn \ncreate level:  gqlg \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/shlhgj/wtlngn/gqlg \ncreate element:  64761 fwtqw \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/zfn \ncreate element:  47247 dmlr.flv \ncreate element:  259570 htvn.rbz \ncreate element:  149238 qrdw \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/shlhgj \ncreate level:  cjmv \ncreate level:  tns \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/shlhgj/cjmv \ncreate element:  140919 jjhc.tzr \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/shlhgj/tns \ncreate element:  248127 fvqbtm.tch \ncreate element:  216202 pwg \ncreate level:  qhhtgsvz \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/shlhgj/tns/qhhtgsvz \ncreate element:  68979 fvqbtm.tch \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/vsdz \ncreate element:  224491 hgrnmh \ncreate level:  jsrqjjtc \ncreate level:  shlhgj \ncreate element:  123062 zfn.gss \ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/vsdz/jsrqjjtc \ncreate element:  245991 phc \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/vsdz/shlhgj \ncreate element:  284208 ctwmwlp.lnm \ncreate element:  11067 vwsrmlf.dvz \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/btjq/wrnftqh \ncreate element:  237658 lldrh \ncreate element:  14804 nszc.wdf \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/gqlg \ncreate element:  211474 jjhc.tzr \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/gtwdqw \ncreate element:  92613 fvqbtm.tch \ncreate element:  206813 ppzhmnb.grd \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/hgrnmh \ncreate element:  249351 bftm \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/jts \ncreate element:  132190 gqlg.vnn \ncreate element:  208091 ldnq \ncreate element:  202593 zcmfcjhf.tzw \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/jvp \ncreate element:  258220 lflcgss.jrm \ngo up\ngo down to start/zjhqnlrr/ddzmvh/mghmb/jvrjcv \ncreate element:  20148 dzzlwp.bdj \ncreate element:  289774 hgrnmh.bvc \ncreate element:  296981 jwscd.cvj \ncreate element:  16617 tbnwvcl.tlv \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr \ncreate level:  bhmmsbmb \ncreate level:  bjwbvcq \ncreate level:  hgrnmh \ncreate level:  ltvtrtth \ncreate level:  prtqcb \ncreate level:  rmn \ncreate level:  shlhgj \ncreate level:  tmzcmb \ncreate level:  vlbqvps \ncreate level:  wmmfp \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/bhmmsbmb \ncreate level:  nccjwf \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/bhmmsbmb/nccjwf \ncreate level:  drwhjfjn \ncreate element:  206638 lflcgss.jrm \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/bhmmsbmb/nccjwf/drwhjfjn \ncreate element:  291772 zcmfcjhf.tzw \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/bjwbvcq \ncreate level:  zfn \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/bjwbvcq/zfn \ncreate element:  303808 wrbldbd \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/hgrnmh \ncreate element:  142765 fvqbtm.tch \ncreate element:  159497 scqf.scf \ncreate element:  270819 zcmfcjhf.tzw \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth \ncreate level:  fwtwqvn \ncreate element:  156894 jnmqdq.zgp \ncreate element:  297860 lflcgss.jrm \ncreate level:  mcgcc \ncreate level:  zfn \ncreate element:  179328 zfn.vnn \ncreate level:  zzsnz \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/fwtwqvn \ncreate level:  rqndc \ncreate level:  rzsrp \ncreate element:  124999 rzsrp.tvr \ncreate level:  shlhgj \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/fwtwqvn/rqndc \ncreate element:  45124 zrcv \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/fwtwqvn/rzsrp \ncreate element:  74041 rzsrp \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/fwtwqvn/shlhgj \ncreate element:  117219 qptfpz.cgc \ncreate element:  281188 shlhgj.bhd \ncreate element:  121750 sptql \ncreate element:  173637 vqp.dbs \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/mcgcc \ncreate element:  18295 gqlg \ncreate level:  ngvwhnvf \ncreate element:  177283 rjsrn.rlq \ncreate element:  54239 rzsrp.tfq \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/mcgcc/ngvwhnvf \ncreate element:  207616 jjhc.tzr \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/zfn \ncreate level:  cwzbljh \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/zfn/cwzbljh \ncreate element:  134952 hmchpgn.nwf \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/zzsnz \ncreate element:  273014 shlhgj.pls \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb \ncreate level:  dtr \ncreate level:  rzsrp \ncreate element:  199012 tnflwcsn \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb/dtr \ncreate level:  gqlg \ncreate level:  grwpbs \ncreate level:  hgrnmh \ncreate element:  115701 lflcgss.jrm \ncreate element:  247838 tnflwcsn \ncreate element:  268721 zcmfcjhf.tzw \ncreate element:  15320 zwcd.dqb \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb/dtr/gqlg \ncreate element:  285009 jjhc.tzr \ncreate element:  125691 nhnlcjjt.zlj \ncreate element:  54424 rzsrp.rll \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb/dtr/grwpbs \ncreate element:  59390 rzsrp.cms \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb/dtr/hgrnmh \ncreate element:  185747 lvtnqqdh.nzq \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb/rzsrp \ncreate element:  268631 hvvpfd.smn \ncreate element:  263890 tcrctpb.pcc \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/rmn \ncreate level:  gtnvc \ncreate element:  205894 hqb.fwh \ncreate element:  280887 lvvmjb.scj \ncreate level:  rsnqlfsz \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/rmn/gtnvc \ncreate element:  28523 jjhc.tzr \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/rmn/rsnqlfsz \ncreate level:  hgrnmh \ncreate level:  nsfhtthc \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/rmn/rsnqlfsz/hgrnmh \ncreate element:  183216 fvqbtm.tch \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/rmn/rsnqlfsz/nsfhtthc \ncreate element:  284747 jspmbh.rvh \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj \ncreate element:  144391 dzf \ncreate level:  lrths \ncreate element:  178083 nhlmsd.mnc \ncreate level:  rwn \ncreate element:  173833 shlhgj.qss \ncreate element:  39183 tnflwcsn \ncreate element:  125029 zfn.hjr \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths \ncreate level:  hgrnmh \ncreate level:  pfc \ncreate element:  86563 rzsrp.gbc \ncreate element:  280631 tmhnc.hmc \ncreate element:  28181 ttsnjc.rhm \ncreate element:  98060 vdmr.czg \ncreate level:  vlshvmvj \ncreate level:  wsn \ncreate element:  210337 zfn.pqp \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/hgrnmh \ncreate level:  mvrlcvj \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/hgrnmh/mvrlcvj \ncreate element:  121034 vssbr.qjm \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/pfc \ncreate level:  gqlg \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/pfc/gqlg \ncreate element:  305519 hdhn.wds \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/vlshvmvj \ncreate element:  56641 lflcgss.jrm \ncreate element:  29190 rzsrp.vsh \ncreate element:  36663 zcmfcjhf.tzw \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/wsn \ncreate element:  137307 gmdfbfjf.crs \ncreate level:  hgtqj \ncreate element:  297924 lflcgss.jrm \ncreate level:  shlhgj \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/wsn/hgtqj \ncreate element:  214202 qnlszftb.bzg \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/wsn/shlhgj \ncreate level:  pmldlbbh \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/lrths/wsn/shlhgj/pmldlbbh \ncreate element:  263722 zwfptl.wsh \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/shlhgj/rwn \ncreate element:  279589 ttqg.qct \ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/tmzcmb \ncreate element:  138557 jjhc.tzr \ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/vlbqvps \ncreate level:  nmfnf \ncreate element:  123659 rzsrp \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/vlbqvps/nmfnf \ncreate level:  jhpnd \ncreate element:  50537 trzvzvgz.bqp \ncreate element:  41828 vps \ncreate element:  195245 wlwt.ftj \ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/vlbqvps/nmfnf/jhpnd \ncreate element:  257519 shlhgj.fwz \ncreate element:  32963 wzmbdtz \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/ddzmvh/pvdwhmcr/wmmfp \ncreate element:  94749 lflcgss.jrm \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd \ncreate element:  284923 bjvwg.phz \ncreate level:  bwjp \ncreate level:  gqlg \ncreate level:  hgrnmh \ncreate element:  8771 jjhc.tzr \ncreate level:  jntt \ncreate element:  271995 qbtn.vps \ncreate element:  299501 shlhgj.crl \ncreate level:  vmph \ncreate level:  zvg \ngo down to start/zjhqnlrr/dsjd/bwjp \ncreate element:  117739 vtrg \ngo up\ngo down to start/zjhqnlrr/dsjd/gqlg \ncreate level:  dwhr \ncreate element:  159876 hgrnmh.jvw \ncreate level:  rzsrp \ngo down to start/zjhqnlrr/dsjd/gqlg/dwhr \ncreate element:  193289 gqlg \ncreate element:  171323 lflcgss.jrm \ngo up\ngo down to start/zjhqnlrr/dsjd/gqlg/rzsrp \ncreate level:  pmsgd \ngo down to start/zjhqnlrr/dsjd/gqlg/rzsrp/pmsgd \ncreate element:  12648 lflcgss.jrm \ncreate level:  wbppspwq \ngo down to start/zjhqnlrr/dsjd/gqlg/rzsrp/pmsgd/wbppspwq \ncreate element:  38834 tnflwcsn \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd/hgrnmh \ncreate element:  76649 cfdcbvdl.gfs \ncreate element:  257249 gmmzf \ncreate element:  83045 lhrtfcz \ngo up\ngo down to start/zjhqnlrr/dsjd/jntt \ncreate element:  286866 lhqvt.lst \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph \ncreate level:  fnvpsr \ncreate level:  gfnvsznj \ncreate element:  19765 zcmfcjhf.tzw \ncreate element:  204319 zzsnj.dcp \ngo down to start/zjhqnlrr/dsjd/vmph/fnvpsr \ncreate level:  flz \ncreate element:  173924 fvqbtm.tch \ncreate element:  248297 mjrhs.scq \ncreate level:  rzsrp \ncreate element:  130580 zfn \ngo down to start/zjhqnlrr/dsjd/vmph/fnvpsr/flz \ncreate element:  106168 brsgg \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/fnvpsr/rzsrp \ncreate element:  221882 hgrnmh.nsl \ncreate level:  smd \ngo down to start/zjhqnlrr/dsjd/vmph/fnvpsr/rzsrp/smd \ncreate level:  drsld \ncreate element:  131686 fvqbtm.tch \ncreate level:  gqlg \ncreate element:  288283 hcw \ngo down to start/zjhqnlrr/dsjd/vmph/fnvpsr/rzsrp/smd/drsld \ncreate element:  85885 zfn.wdf \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/fnvpsr/rzsrp/smd/gqlg \ncreate element:  8466 dzjtj.zbc \ngo up\ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj \ncreate level:  fqb \ncreate element:  265075 gqlg \ncreate level:  hdhmbtj \ncreate element:  74385 hpz \ncreate level:  lzdq \ncreate level:  rlvqmwv \ncreate level:  rzsrp \ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/fqb \ncreate element:  55182 ccjgpg \ncreate element:  245930 ppdgwcm.zfb \ncreate element:  164364 sgtgqdn.tfp \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/hdhmbtj \ncreate level:  gqlg \ncreate element:  68609 jjhc.tzr \ncreate level:  rzsrp \ncreate level:  vrmrnt \ncreate element:  66988 zcmfcjhf.tzw \ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/hdhmbtj/gqlg \ncreate element:  156776 tnflwcsn \ncreate level:  vdcbg \ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/hdhmbtj/gqlg/vdcbg \ncreate element:  261780 lflcgss.jrm \ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/hdhmbtj/rzsrp \ncreate element:  27818 zfn \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/hdhmbtj/vrmrnt \ncreate element:  273664 msmzfnj.llc \ncreate element:  145156 svzmwnrq.chh \ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/lzdq \ncreate element:  214363 fms \ncreate element:  190021 lfzcgh.dsq \ncreate element:  21357 qtvvmj.zqw \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/rlvqmwv \ncreate level:  gqlg \ncreate element:  198296 gqlg.sdz \ncreate element:  842 gshcswc.dcb \ncreate level:  shlhgj \ncreate element:  199828 snng \ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/rlvqmwv/gqlg \ncreate element:  183087 zfn.nsj \ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/rlvqmwv/shlhgj \ncreate element:  73040 tzgjrqmb \ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd/vmph/gfnvsznj/rzsrp \ncreate element:  229576 vtftgng.wfz \ngo up\ngo up\ngo up\ngo down to start/zjhqnlrr/dsjd/zvg \ncreate element:  85701 shlhgj.dvf \ngo up\ngo up\ngo down to start/zjhqnlrr/nnzvl \ncreate level:  wwzsf \ngo down to start/zjhqnlrr/nnzvl/wwzsf \ncreate element:  105177 tvbdz \ngo up\ngo up\ngo up\ngo down to start/zssdlnc \ncreate level:  nfgh \ncreate element:  166004 twdcrh.zld \ncreate level:  zfn \ngo down to start/zssdlnc/nfgh \ncreate element:  102281 fvqbtm.tch \ngo up\ngo down to start/zssdlnc/zfn \ncreate level:  fbmww \ncreate level:  jsst \ncreate element:  206602 shlhgj.cln \ngo down to start/zssdlnc/zfn/fbmww \ncreate element:  179734 fll \ngo up\ngo down to start/zssdlnc/zfn/jsst \ncreate level:  flp \ngo down to start/zssdlnc/zfn/jsst/flp \ncreate element:  32274 gctgt.stn \ncreate element:  67650 ggvj.bwz \n\n\n\nall_sizes &lt;- map_dbl(all_dirs, function(cur_dir){\n  get_sum_size_dir(cur_dir$name)\n})\nall_dirs_less_max_size &lt;- names(all_sizes)[all_sizes &lt; max_dir_size]\nall_dirs_less_max_size\n\n [1] \"start/plmdrbn/fmzjhrq\"                                                           \n [2] \"start/plmdrbn/fmzjhrq/rrjjsvm\"                                                   \n [3] \"start/stqq/whmdbn\"                                                               \n [4] \"start/zjhqnlrr/bzzvj/wjtlg\"                                                      \n [5] \"start/zjhqnlrr/bzzvj/zfn\"                                                        \n [6] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/pbzhfsg\"                                   \n [7] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/gqlg\"                           \n [8] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/gqlg/nvjqp/gcq/mslhm\"                \n [9] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr/lhp\"      \n[10] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr/npf\"      \n[11] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/dthcrbmr/qbgrjr\"   \n[12] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/shlhgj/wtlngn\"     \n[13] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/rzsrp/mbsjjzft/stgszvmj/shlhgj/wtlngn/gqlg\"\n[14] \"start/zjhqnlrr/ddzmvh/mghmb/btjq/rqtc/shlhgj/tns/qhhtgsvz\"                       \n[15] \"start/zjhqnlrr/ddzmvh/pvdwhmcr/wmmfp\"                                            \n[16] \"start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/fwtwqvn/rqndc\"                           \n[17] \"start/zjhqnlrr/ddzmvh/pvdwhmcr/ltvtrtth/fwtwqvn/rzsrp\"                           \n[18] \"start/zjhqnlrr/ddzmvh/pvdwhmcr/prtqcb/dtr/grwpbs\"                                \n[19] \"start/zjhqnlrr/ddzmvh/pvdwhmcr/rmn/gtnvc\"                                        \n[20] \"start/zjhqnlrr/dsjd/zvg\"                                                         \n[21] \"start/zjhqnlrr/dsjd/gqlg/rzsrp\"                                                  \n[22] \"start/zjhqnlrr/dsjd/gqlg/rzsrp/pmsgd\"                                            \n[23] \"start/zjhqnlrr/dsjd/gqlg/rzsrp/pmsgd/wbppspwq\"                                   \n[24] \"start/zjhqnlrr/dsjd/vmph/fnvpsr/rzsrp/smd/drsld\"                                 \n[25] \"start/zjhqnlrr/dsjd/vmph/fnvpsr/rzsrp/smd/gqlg\"                                  \n[26] \"start/zjhqnlrr/dsjd/vmph/gfnvsznj/hdhmbtj/rzsrp\"                                 \n[27] \"start/zjhqnlrr/dsjd/vmph/gfnvsznj/rlvqmwv/shlhgj\"                                \n[28] \"start/zssdlnc/zfn/jsst\"                                                          \n[29] \"start/zssdlnc/zfn/jsst/flp\"                                                      \n\n\n\n\nIn the full input the suz size of the directories that have size of at most 10^{5} is 1.749646^{6}! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_5.html",
    "href": "SOLUTIONS/2022/Day_5.html",
    "title": "Day 5",
    "section": "",
    "text": "The input is one file, but two parts:\n\nfirst, the order of crates in stacks\nnext, the movement procedure\n\n\ninput_file_path &lt;- here(\"DATA\", \"2022\", \"input_day_05.txt\")\n\ncat(system(paste(\"head\", input_file_path), intern = TRUE), sep = \"\\n\")\n\n[N]     [Q]         [N]            \n[R]     [F] [Q]     [G] [M]        \n[J]     [Z] [T]     [R] [H] [J]    \n[T] [H] [G] [R]     [B] [N] [T]    \n[Z] [J] [J] [G] [F] [Z] [S] [M]    \n[B] [N] [N] [N] [Q] [W] [L] [Q] [S]\n[D] [S] [R] [V] [T] [C] [C] [N] [G]\n[F] [R] [C] [F] [L] [Q] [F] [D] [P]\n 1   2   3   4   5   6   7   8   9 \n\n\n\n\nI should probably create a nice code where I read in the input and convert it to the list of vectors, but I don’t have time now 😎\n\n\nI have splitted the input file to get separate input for the stacks and for the instructions.\n\nsystem(\"./Day_5_split_input.sh\")\nlist.files(here(\"DATA\"))\n\n[1] \"2022\" \"2023\"\n\n(instructions &lt;- read_table(\n  here(\"DATA\", \"2022\", \"input_day_05_instructions.txt\"),\n  show_col_types = FALSE,\n  col_names = FALSE\n))\n\n# A tibble: 503 × 6\n   X1       X2 X3       X4 X5       X6\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 move      3 from      9 to        4\n 2 move      2 from      5 to        2\n 3 move      8 from      1 to        9\n 4 move      4 from      7 to        1\n 5 move      5 from      3 to        8\n 6 move      3 from      3 to        7\n 7 move     11 from      8 to        3\n 8 move      7 from      3 to        6\n 9 move      2 from      5 to        9\n10 move      3 from      1 to        6\n# ℹ 493 more rows\n\ninstructions &lt;- instructions %&gt;%\n  select(move_how_many = X2, from = X4, to = X6)\n\nNow, creating a list of vectors for the initial stack of crates.\n\ninit_stacks &lt;- list(\n  stack1 = c(\"F\", \"D\", \"B\", \"Z\", \"T\", \"J\", \"R\", \"N\"),\n  stack2 = c(\"R\", \"S\", \"N\", \"J\", \"H\"),\n  stack3 = c(\"C\", \"R\", \"N\", \"J\", \"G\", \"Z\", \"F\", \"Q\"),\n  stack4 = c(\"F\", \"V\", \"N\", \"G\", \"R\", \"T\", \"Q\"),\n  stack5 = c(\"L\", \"T\", \"Q\", \"F\"),\n  stack6 = c(\"Q\", \"C\", \"W\", \"Z\", \"B\", \"R\", \"G\", \"N\"),\n  stack7 = c(\"F\", \"C\", \"L\", \"S\", \"N\", \"H\", \"M\"),\n  stack8 = c(\"D\", \"N\", \"Q\", \"M\", \"T\", \"J\"),\n  stack9 = c(\"P\", \"G\", \"S\")\n)"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_5.html#data",
    "href": "SOLUTIONS/2022/Day_5.html#data",
    "title": "Day 5",
    "section": "",
    "text": "The input is one file, but two parts:\n\nfirst, the order of crates in stacks\nnext, the movement procedure\n\n\ninput_file_path &lt;- here(\"DATA\", \"2022\", \"input_day_05.txt\")\n\ncat(system(paste(\"head\", input_file_path), intern = TRUE), sep = \"\\n\")\n\n[N]     [Q]         [N]            \n[R]     [F] [Q]     [G] [M]        \n[J]     [Z] [T]     [R] [H] [J]    \n[T] [H] [G] [R]     [B] [N] [T]    \n[Z] [J] [J] [G] [F] [Z] [S] [M]    \n[B] [N] [N] [N] [Q] [W] [L] [Q] [S]\n[D] [S] [R] [V] [T] [C] [C] [N] [G]\n[F] [R] [C] [F] [L] [Q] [F] [D] [P]\n 1   2   3   4   5   6   7   8   9 \n\n\n\n\nI should probably create a nice code where I read in the input and convert it to the list of vectors, but I don’t have time now 😎\n\n\nI have splitted the input file to get separate input for the stacks and for the instructions.\n\nsystem(\"./Day_5_split_input.sh\")\nlist.files(here(\"DATA\"))\n\n[1] \"2022\" \"2023\"\n\n(instructions &lt;- read_table(\n  here(\"DATA\", \"2022\", \"input_day_05_instructions.txt\"),\n  show_col_types = FALSE,\n  col_names = FALSE\n))\n\n# A tibble: 503 × 6\n   X1       X2 X3       X4 X5       X6\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 move      3 from      9 to        4\n 2 move      2 from      5 to        2\n 3 move      8 from      1 to        9\n 4 move      4 from      7 to        1\n 5 move      5 from      3 to        8\n 6 move      3 from      3 to        7\n 7 move     11 from      8 to        3\n 8 move      7 from      3 to        6\n 9 move      2 from      5 to        9\n10 move      3 from      1 to        6\n# ℹ 493 more rows\n\ninstructions &lt;- instructions %&gt;%\n  select(move_how_many = X2, from = X4, to = X6)\n\nNow, creating a list of vectors for the initial stack of crates.\n\ninit_stacks &lt;- list(\n  stack1 = c(\"F\", \"D\", \"B\", \"Z\", \"T\", \"J\", \"R\", \"N\"),\n  stack2 = c(\"R\", \"S\", \"N\", \"J\", \"H\"),\n  stack3 = c(\"C\", \"R\", \"N\", \"J\", \"G\", \"Z\", \"F\", \"Q\"),\n  stack4 = c(\"F\", \"V\", \"N\", \"G\", \"R\", \"T\", \"Q\"),\n  stack5 = c(\"L\", \"T\", \"Q\", \"F\"),\n  stack6 = c(\"Q\", \"C\", \"W\", \"Z\", \"B\", \"R\", \"G\", \"N\"),\n  stack7 = c(\"F\", \"C\", \"L\", \"S\", \"N\", \"H\", \"M\"),\n  stack8 = c(\"D\", \"N\", \"Q\", \"M\", \"T\", \"J\"),\n  stack9 = c(\"P\", \"G\", \"S\")\n)"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_5.html#functions",
    "href": "SOLUTIONS/2022/Day_5.html#functions",
    "title": "Day 5",
    "section": "Functions",
    "text": "Functions\nThis looks like we need some type queue function:\n\npush_back &lt;- function(stacks, from, to){\n  stack_name_from &lt;- paste0(\"stack\", from)\n  stack_name_to &lt;- paste0(\"stack\", to)\n  \n  length_from &lt;- length(stacks[[stack_name_from]])\n  \n  crate_to_move &lt;- stacks[[stack_name_from]][length_from]\n  new_stacks &lt;- stacks\n  new_stacks[[stack_name_from]] &lt;- stacks[[stack_name_from]][-length_from]\n  new_stacks[[stack_name_to]] &lt;- c(stacks[[stack_name_to]], crate_to_move)\n  \n  return(new_stacks)\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_5.html#rearranging",
    "href": "SOLUTIONS/2022/Day_5.html#rearranging",
    "title": "Day 5",
    "section": "Rearranging",
    "text": "Rearranging\nThis is best in base R…\n\ncur_stacks &lt;- init_stacks\n\nfor(i in nrow(instructions)){\n  cur_instruction &lt;- instructions[i,]\n\n  for(j in 1:(cur_instruction$move_how_many)){\n    cur_stacks &lt;&lt;- push_back(cur_stacks, cur_instruction$from, cur_instruction$to)\n  }\n}\ncur_stacks\n\n$stack1\n[1] \"F\" \"D\" \"B\" \"Z\" \"T\" \"J\" \"R\" \"N\"\n\n$stack2\n[1] \"R\" \"S\" \"N\" \"J\" \"H\"\n\n$stack3\n[1] \"C\" \"R\" \"N\" \"J\" \"G\" \"Z\" \"F\" \"Q\"\n\n$stack4\n[1] \"F\" \"V\" \"N\" \"G\" \"R\" \"T\" \"Q\"\n\n$stack5\n[1] \"L\" \"T\" \"Q\" \"F\"\n\n$stack6\n[1] \"Q\" \"C\" \"W\" \"Z\" \"B\"\n\n$stack7\n[1] \"F\" \"C\" \"L\" \"S\" \"N\" \"H\" \"M\"\n\n$stack8\n[1] \"D\" \"N\" \"Q\" \"M\" \"T\" \"J\"\n\n$stack9\n[1] \"P\" \"G\" \"S\" \"N\" \"G\" \"R\""
  },
  {
    "objectID": "SOLUTIONS/2022/Day_5.html#whats-on-top",
    "href": "SOLUTIONS/2022/Day_5.html#whats-on-top",
    "title": "Day 5",
    "section": "What’s on top?",
    "text": "What’s on top?\n\ntop_crates &lt;- map_chr(\n  cur_stacks,\n  function(stack){\n    l_stack &lt;- length(stack)\n    return(stack[l_stack])\n  }\n)\n\n\n\nThe last crates on all stacks: NHQQFBMJR! Wrong? 🤔"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_3.html",
    "href": "SOLUTIONS/2022/Day_3.html",
    "title": "Day 3",
    "section": "",
    "text": "Each line is a list of items in one rucksack.\n\n(rucksack_data &lt;- read_table(\n  here(\"DATA\", \"2022\", \"input_day_03.txt\"),\n  col_names = FALSE\n))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  X1 = col_character()\n)\n\n\n# A tibble: 300 × 1\n   X1                                            \n   &lt;chr&gt;                                         \n 1 DMwrszrfMzSSCpLpfCCn                          \n 2 RMvhZhQqlvhMvRtbvbcPclPlncddppLTdppd          \n 3 tVMQhFtjjWmsFJsmsW                            \n 4 trRtvNhfJhSzzSTFVhQQZQhHGphP                  \n 5 CnLMBWLwDMgMcwwdngdHGPVTQGpTHZdGPGpd          \n 6 LLDqcDgwqCMnLWqtvzrzbbtJqPjJ                  \n 7 wQQwHNQLmbWQbQRHwHNFBbwqPfjqlzRMGRqzpSfvPlzplM\n 8 nCtGCZZtsGsrtDMZpfMpSlMlvlZq                  \n 9 cJctJCgVJsCJnDTsCthGhGLwBWBbbQmLbgQLQQdWbbbQ  \n10 ZWnNlTNTnhhQQlDNdmmpwrrrqBwjwjZd              \n# ℹ 290 more rows"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_3.html#data",
    "href": "SOLUTIONS/2022/Day_3.html#data",
    "title": "Day 3",
    "section": "",
    "text": "Each line is a list of items in one rucksack.\n\n(rucksack_data &lt;- read_table(\n  here(\"DATA\", \"2022\", \"input_day_03.txt\"),\n  col_names = FALSE\n))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  X1 = col_character()\n)\n\n\n# A tibble: 300 × 1\n   X1                                            \n   &lt;chr&gt;                                         \n 1 DMwrszrfMzSSCpLpfCCn                          \n 2 RMvhZhQqlvhMvRtbvbcPclPlncddppLTdppd          \n 3 tVMQhFtjjWmsFJsmsW                            \n 4 trRtvNhfJhSzzSTFVhQQZQhHGphP                  \n 5 CnLMBWLwDMgMcwwdngdHGPVTQGpTHZdGPGpd          \n 6 LLDqcDgwqCMnLWqtvzrzbbtJqPjJ                  \n 7 wQQwHNQLmbWQbQRHwHNFBbwqPfjqlzRMGRqzpSfvPlzplM\n 8 nCtGCZZtsGsrtDMZpfMpSlMlvlZq                  \n 9 cJctJCgVJsCJnDTsCthGhGLwBWBbbQmLbgQLQQdWbbbQ  \n10 ZWnNlTNTnhhQQlDNdmmpwrrrqBwjwjZd              \n# ℹ 290 more rows"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_3.html#find-the-repeating-item",
    "href": "SOLUTIONS/2022/Day_3.html#find-the-repeating-item",
    "title": "Day 3",
    "section": "Find the repeating item",
    "text": "Find the repeating item\nFirst, we need to find the middle of each string and divide.\n\nrucksack_divided &lt;- map(\n  rucksack_data$X1,\n  function(item_list){\n    split_at &lt;- str_length(item_list)/2\n    out_strings &lt;- c(\n      str_sub(item_list, start = 1, end = split_at),\n      str_sub(item_list, start = split_at + 1, end = -1)\n    )\n    return(out_strings)\n  }\n)\nrucksack_divided[[1]]\n\n[1] \"DMwrszrfMz\" \"SSCpLpfCCn\"\n\n\nNext, compare the strings in each compartment to find the repeating item for each rucksack.\n\nrepeating_items &lt;- map(\n  rucksack_divided,\n  function(compartments){\n    unique_contents &lt;- map(\n      compartments,\n      function(item_list){\n        strsplit(item_list, split = \"\") %&gt;%\n          unlist() %&gt;%\n          unique()\n      }\n    )\n    return(Reduce(f = intersect, x = unique_contents))\n  }\n)\nrepeating_items[[1]]\n\n[1] \"f\"\n\n\nChecking - do I get only one item per rucksack?\n\nlengths(repeating_items) %&gt;%\n  unique()\n\n[1] 1\n\n\n✔️ Yes, great!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_3.html#priority-of-items",
    "href": "SOLUTIONS/2022/Day_3.html#priority-of-items",
    "title": "Day 3",
    "section": "Priority of items",
    "text": "Priority of items\nLowercase letters have priorities from 1 through 26, uppercase letters - from 27 through 52.\n\npriority_low &lt;- str_locate(\n  paste0(letters, collapse = \"\"), letters\n)[, \"start\"]\npriority_low &lt;- tibble(\n  letter = letters,\n  prior = priority_low\n)\npriority_low\n\n# A tibble: 26 × 2\n   letter prior\n   &lt;chr&gt;  &lt;int&gt;\n 1 a          1\n 2 b          2\n 3 c          3\n 4 d          4\n 5 e          5\n 6 f          6\n 7 g          7\n 8 h          8\n 9 i          9\n10 j         10\n# ℹ 16 more rows\n\npriority_up &lt;- str_locate(\n  paste0(LETTERS, collapse = \"\"), LETTERS\n)[, \"start\"] + 26\npriority_up &lt;- tibble(\n  letter = LETTERS,\n  prior = priority_up\n)\npriority_up\n\n# A tibble: 26 × 2\n   letter prior\n   &lt;chr&gt;  &lt;dbl&gt;\n 1 A         27\n 2 B         28\n 3 C         29\n 4 D         30\n 5 E         31\n 6 F         32\n 7 G         33\n 8 H         34\n 9 I         35\n10 J         36\n# ℹ 16 more rows\n\npriority_all &lt;- bind_rows(\n  priority_low, priority_up\n)\n\nNow, find the sum of the priorities of repeated items.\n\ntotal_priority &lt;- tibble(\n  repeat_item = unlist(repeating_items)\n  ) %&gt;%\n  left_join(\n    priority_all,\n    by = c(\"repeat_item\" = \"letter\")\n  ) %&gt;%\n  summarise(sum_priority = sum(prior))\n\n\n\nThe total priority is 7811! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_3.html#group-badges",
    "href": "SOLUTIONS/2022/Day_3.html#group-badges",
    "title": "Day 3",
    "section": "Group badges",
    "text": "Group badges\nEach three elves create a group and they are recognized by the item that they carry. This item is the only item that is shared by these elves.\n\n# there are 3 members in each group\nno_members &lt;- 3\n(rucksack_groups &lt;- rucksack_data %&gt;%\n  add_column(group_no = \n               rep(\n                 seq(1:(nrow(rucksack_data)/no_members)),\n                 each = no_members\n                )\n             ))\n\n# A tibble: 300 × 2\n   X1                                             group_no\n   &lt;chr&gt;                                             &lt;int&gt;\n 1 DMwrszrfMzSSCpLpfCCn                                  1\n 2 RMvhZhQqlvhMvRtbvbcPclPlncddppLTdppd                  1\n 3 tVMQhFtjjWmsFJsmsW                                    1\n 4 trRtvNhfJhSzzSTFVhQQZQhHGphP                          2\n 5 CnLMBWLwDMgMcwwdngdHGPVTQGpTHZdGPGpd                  2\n 6 LLDqcDgwqCMnLWqtvzrzbbtJqPjJ                          2\n 7 wQQwHNQLmbWQbQRHwHNFBbwqPfjqlzRMGRqzpSfvPlzplM        3\n 8 nCtGCZZtsGsrtDMZpfMpSlMlvlZq                          3\n 9 cJctJCgVJsCJnDTsCthGhGLwBWBbbQmLbgQLQQdWbbbQ          3\n10 ZWnNlTNTnhhQQlDNdmmpwrrrqBwjwjZd                      4\n# ℹ 290 more rows\n\nfind_common_item &lt;- function(items_list){\n  unique_items &lt;- map(items_list, function(items){\n    str_split(items, pattern = \"\") %&gt;%\n      unlist() %&gt;%\n      unique()\n  })\n  return(\n    Reduce(intersect, unique_items)\n  )\n}\n\n(rucksack_groups &lt;- rucksack_groups %&gt;%\n  group_by(group_no) %&gt;%\n  summarise(\n    common_item = find_common_item(X1)\n  ) %&gt;%\n  left_join(priority_all, by = c(\"common_item\" = \"letter\")))\n\n# A tibble: 100 × 3\n   group_no common_item prior\n      &lt;int&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1        1 M              39\n 2        2 P              42\n 3        3 G              33\n 4        4 l              12\n 5        5 s              19\n 6        6 t              20\n 7        7 Z              52\n 8        8 n              14\n 9        9 p              16\n10       10 z              26\n# ℹ 90 more rows\n\nsum_prior &lt;- rucksack_groups %&gt;%\n  summarise(sum_prior = sum(prior)) %&gt;%\n  pull()\n\n\n\nThe total priority is 2639! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_12.html",
    "href": "SOLUTIONS/2022/Day_12.html",
    "title": "Day 12",
    "section": "",
    "text": "Up, up, up, we are gonna climb!\nThe letters represent the levels, from a (lowest) to z (highest). We need to get from S to E (which is on level z), but walking only one level up (or down) at a time.\n\nlevels_map &lt;- map(\n  readLines(\n    here(\"DATA\", \"2022\", \"input_day_12.txt\")\n  ),\n  function(line){\n    str_split(line, pattern = \"\") %&gt;% unlist()\n  }\n) %&gt;% do.call(rbind, .)\ndim(levels_map)\n\n[1]  41 162\n\n\n\nlevels_map %&gt;%\n  as_tibble(rownames = \"row\") %&gt;%\n  pivot_longer(cols = V1:V162, names_to = \"col\", values_to = \"val\") %&gt;%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row),\n    val = factor(val, levels = c(letters, \"E\", \"S\"))\n  ) %&gt;%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = val)) +\n  coord_fixed() +\n  scale_fill_manual(\n    values = c(grey((1:length(letters))/length(letters)), \"#0000FF\", \"#FF0000\"),\n    name = \"\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\"\n  )\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_12.html#data",
    "href": "SOLUTIONS/2022/Day_12.html#data",
    "title": "Day 12",
    "section": "",
    "text": "Up, up, up, we are gonna climb!\nThe letters represent the levels, from a (lowest) to z (highest). We need to get from S to E (which is on level z), but walking only one level up (or down) at a time.\n\nlevels_map &lt;- map(\n  readLines(\n    here(\"DATA\", \"2022\", \"input_day_12.txt\")\n  ),\n  function(line){\n    str_split(line, pattern = \"\") %&gt;% unlist()\n  }\n) %&gt;% do.call(rbind, .)\ndim(levels_map)\n\n[1]  41 162\n\n\n\nlevels_map %&gt;%\n  as_tibble(rownames = \"row\") %&gt;%\n  pivot_longer(cols = V1:V162, names_to = \"col\", values_to = \"val\") %&gt;%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row),\n    val = factor(val, levels = c(letters, \"E\", \"S\"))\n  ) %&gt;%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = val)) +\n  coord_fixed() +\n  scale_fill_manual(\n    values = c(grey((1:length(letters))/length(letters)), \"#0000FF\", \"#FF0000\"),\n    name = \"\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\"\n  )\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_10.html",
    "href": "SOLUTIONS/2022/Day_10.html",
    "title": "Day 10",
    "section": "",
    "text": "Input is a series of CPU instructions.\n\ninput_file &lt;- here(\"DATA\", \"2022\", \"input_day_10.txt\")\n\ncat(system(paste0(\"head \", input_file), intern = TRUE), sep = \"\\n\")\n\nnoop\nnoop\naddx 5\naddx 29\naddx -28\naddx 5\naddx -1\nnoop\nnoop\naddx 5\n\nall_instructions &lt;- scan(\n  input_file,\n  what = \"character\",\n  sep = \"\\n\"\n)\n\nThere are two types of instructions:\n\nnoop - lasts one cycle and doesn’t do anything;\naddx V - lasts two cycles and after two cycles, the X register has increased by V (can be also negative)\n\nI will need to follow the cycles and the X register."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_10.html#data",
    "href": "SOLUTIONS/2022/Day_10.html#data",
    "title": "Day 10",
    "section": "",
    "text": "Input is a series of CPU instructions.\n\ninput_file &lt;- here(\"DATA\", \"2022\", \"input_day_10.txt\")\n\ncat(system(paste0(\"head \", input_file), intern = TRUE), sep = \"\\n\")\n\nnoop\nnoop\naddx 5\naddx 29\naddx -28\naddx 5\naddx -1\nnoop\nnoop\naddx 5\n\nall_instructions &lt;- scan(\n  input_file,\n  what = \"character\",\n  sep = \"\\n\"\n)\n\nThere are two types of instructions:\n\nnoop - lasts one cycle and doesn’t do anything;\naddx V - lasts two cycles and after two cycles, the X register has increased by V (can be also negative)\n\nI will need to follow the cycles and the X register."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_10.html#functions",
    "href": "SOLUTIONS/2022/Day_10.html#functions",
    "title": "Day 10",
    "section": "Functions",
    "text": "Functions\n\nincrease_cycle &lt;- function(){\n  cycle &lt;&lt;- cycle + 1\n}\n\ncopy_last_reg &lt;- function(){\n  register[cycle + 1] &lt;&lt;- register[cycle]\n}\n\nadd_to_reg &lt;- function(V){\n  register[cycle + 1] &lt;&lt;- register[cycle] + V\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_10.html#run-cycles",
    "href": "SOLUTIONS/2022/Day_10.html#run-cycles",
    "title": "Day 10",
    "section": "Run cycles",
    "text": "Run cycles\nI need to know of only 220 cycles.\n\nregister &lt;- rep(NA, 240)\n# register starts with 1\nregister[1] &lt;- 1\nhead(register)\n\n[1]  1 NA NA NA NA NA\n\n\nI will need to start from cycle 1 instead of 0.\n\nstart_cycle &lt;- 1\ncycle &lt;- start_cycle\n\nidx &lt;- 1\ncopy_last_reg()\nwhile(idx &lt;= length(all_instructions)){\n  instruction &lt;- all_instructions[idx]\n  \n  if(instruction == \"noop\"){\n    increase_cycle()\n    copy_last_reg()\n  } else {\n    V &lt;- as.numeric(word(instruction, 2))\n    \n    increase_cycle()\n    copy_last_reg()\n    increase_cycle()\n    add_to_reg(V)\n  }\n  idx &lt;&lt;- idx + 1\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_10.html#compute-total-strength",
    "href": "SOLUTIONS/2022/Day_10.html#compute-total-strength",
    "title": "Day 10",
    "section": "Compute total strength",
    "text": "Compute total strength\nThe signal strength is equal to the multiplication of the X register value and cycle number. We focus on cycles: 20, 60, 100, 140, 180, and 220.\n\nchosen_cycles &lt;- c(20, 60, 100, 140, 180, 220)\nsum_signal_strengths &lt;- sum(chosen_cycles*register[chosen_cycles + 1])\n\n\n\nThe sum of chosen signal strengths is 1.492^{4}! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_1.html",
    "href": "SOLUTIONS/2022/Day_1.html",
    "title": "Day 1",
    "section": "",
    "text": "The list of calories of all items carried by the elves.\n\ndata_in_file &lt;- here(\"DATA\", \"2022\", \"input_day_01.txt\")\n\n(calories_raw &lt;- read_table(\n  data_in_file,\n  col_names = FALSE,\n  skip_empty_rows = FALSE,\n  show_col_types = FALSE\n))\n\n# A tibble: 2,240 × 1\n      X1\n   &lt;dbl&gt;\n 1  2991\n 2 13880\n 3 13279\n 4  1514\n 5  9507\n 6    NA\n 7  6544\n 8  9672\n 9 13044\n10  4794\n# ℹ 2,230 more rows\n\n\nEach elf inputs the calories their carrying in column, separating their items from the previous ones by an empty line.\n\n\nWhat an idea these elves had! I wonder which programming language they used?!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_1.html#data",
    "href": "SOLUTIONS/2022/Day_1.html#data",
    "title": "Day 1",
    "section": "",
    "text": "The list of calories of all items carried by the elves.\n\ndata_in_file &lt;- here(\"DATA\", \"2022\", \"input_day_01.txt\")\n\n(calories_raw &lt;- read_table(\n  data_in_file,\n  col_names = FALSE,\n  skip_empty_rows = FALSE,\n  show_col_types = FALSE\n))\n\n# A tibble: 2,240 × 1\n      X1\n   &lt;dbl&gt;\n 1  2991\n 2 13880\n 3 13279\n 4  1514\n 5  9507\n 6    NA\n 7  6544\n 8  9672\n 9 13044\n10  4794\n# ℹ 2,230 more rows\n\n\nEach elf inputs the calories their carrying in column, separating their items from the previous ones by an empty line.\n\n\nWhat an idea these elves had! I wonder which programming language they used?!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_1.html#separate-elves",
    "href": "SOLUTIONS/2022/Day_1.html#separate-elves",
    "title": "Day 1",
    "section": "Separate elves",
    "text": "Separate elves\nEach NA means new elf.\n\ncalories_new &lt;- calories_raw %&gt;%\n  rename(calories = X1) %&gt;%\n  mutate(is_na = is.na(calories)) %&gt;%\n  mutate(which_elf = cumsum(is_na) + 1)\ncalories_new\n\n# A tibble: 2,240 × 3\n   calories is_na which_elf\n      &lt;dbl&gt; &lt;lgl&gt;     &lt;dbl&gt;\n 1     2991 FALSE         1\n 2    13880 FALSE         1\n 3    13279 FALSE         1\n 4     1514 FALSE         1\n 5     9507 FALSE         1\n 6       NA TRUE          2\n 7     6544 FALSE         2\n 8     9672 FALSE         2\n 9    13044 FALSE         2\n10     4794 FALSE         2\n# ℹ 2,230 more rows"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_1.html#count-calories",
    "href": "SOLUTIONS/2022/Day_1.html#count-calories",
    "title": "Day 1",
    "section": "Count calories",
    "text": "Count calories\n\ncalories_new %&gt;%\n  group_by(which_elf) %&gt;%\n  summarise(sum_cal = sum(calories, na.rm = TRUE)) %&gt;%\n  arrange(desc(sum_cal))\n\n# A tibble: 245 × 2\n   which_elf sum_cal\n       &lt;dbl&gt;   &lt;dbl&gt;\n 1       213   68467\n 2       234   68143\n 3        89   66810\n 4        34   66631\n 5       209   65461\n 6       199   64966\n 7       145   64176\n 8       140   63815\n 9       110   63338\n10       150   63104\n# ℹ 235 more rows\n\n\n🥳 TADA!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_11.html",
    "href": "SOLUTIONS/2022/Day_11.html",
    "title": "Day 11",
    "section": "",
    "text": "Monkeys 🐒 are having fun with my stuff!!!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_11.html#data",
    "href": "SOLUTIONS/2022/Day_11.html#data",
    "title": "Day 11",
    "section": "",
    "text": "Monkeys 🐒 are having fun with my stuff!!!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_11.html#functions-and-objects",
    "href": "SOLUTIONS/2022/Day_11.html#functions-and-objects",
    "title": "Day 11",
    "section": "Functions and objects",
    "text": "Functions and objects\nI will need to create classes, I think.\n\n🐒 Monkey\n\nnew_monkey &lt;- function(id, things, operation, test){\n  structure(id, things, operation, test)\n}\n\n\n\n🎁 Thing\nA class with attributes worry_level and monkey (which monkey holds it).\n\nnew_thing &lt;- function(id, worry_level, monkey){\n  stopifnot(is.numeric(worry_level))\n  structure(id, worry_level, monkey = monkey, class = \"thing\")\n}\nprint.thing &lt;- function(x, ...){\n  cat(\"This thing (\", id, \") is associated with current worry level of \",\n      x$worry_level, \" and is being hold by a monkey no.\", x$monkey, \"\\n\")\n}\n\nchange_worry_level(thing, operation){\n  old &lt;- thing$worry_level\n  new &lt;- NA\n  eval(parse_expr(operation))\n  thing$worry_level &lt;- new\n  return(thing)\n}\nchange_monkey_holding(thing, old_monkey, new_monkey){\n  remove_thing(old_monkey, thing$id)\n  add_thing(new_monkey, thing$id)\n  thing$monkey &lt;- new_monkey$id\n  return(thing)\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_2.html",
    "href": "SOLUTIONS/2022/Day_2.html",
    "title": "Day 2",
    "section": "",
    "text": "We have a special coding here - let’s write a dictionary for that:\n\nopponents codes:\n\nA = \"rock\", B = \"paper\", C = \"scissors\"\n\nmy codes:\n\nX = \"rock\", Y = \"paper\", Z = \"scissors\"\n..but the important thing is that each of these give various points, which we can basically treat as factor-levels:\n\n(games_in &lt;- read_delim(\n  here(\"DATA\", \"2022\", \"input_day_02.txt\"),\n  delim = \" \",\n  col_names = FALSE,\n  skip_empty_rows = FALSE,\n  show_col_types = FALSE\n))\n\n# A tibble: 2,500 × 2\n   X1    X2   \n   &lt;chr&gt; &lt;chr&gt;\n 1 C     Y    \n 2 A     Z    \n 3 B     Y    \n 4 A     Z    \n 5 A     X    \n 6 A     Z    \n 7 B     Y    \n 8 A     Z    \n 9 B     Y    \n10 C     Z    \n# ℹ 2,490 more rows\n\ngames_fct &lt;- games_in %&gt;%\n  rename(opponent = X1, me = X2) %&gt;%\n  mutate(across(.fns = as.factor))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(.fns = as.factor)`.\nCaused by warning:\n! Using `across()` without supplying `.cols` was deprecated in dplyr 1.1.0.\nℹ Please supply `.cols` instead.\n\n\n\n\n\nskimr::skim(games_fct)\n\n\nData summary\n\n\nName\ngames_fct\n\n\nNumber of rows\n2500\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nopponent\n0\n1\nFALSE\n3\nB: 991, C: 795, A: 714\n\n\nme\n0\n1\nFALSE\n3\nY: 1178, Z: 771, X: 551\n\n\n\n\nlevels(games_fct$opponent)\n\n[1] \"A\" \"B\" \"C\"\n\nlevels(games_fct$me)\n\n[1] \"X\" \"Y\" \"Z\"\n\n\n✔️ OK, no missingness and no strange values."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_2.html#data",
    "href": "SOLUTIONS/2022/Day_2.html#data",
    "title": "Day 2",
    "section": "",
    "text": "We have a special coding here - let’s write a dictionary for that:\n\nopponents codes:\n\nA = \"rock\", B = \"paper\", C = \"scissors\"\n\nmy codes:\n\nX = \"rock\", Y = \"paper\", Z = \"scissors\"\n..but the important thing is that each of these give various points, which we can basically treat as factor-levels:\n\n(games_in &lt;- read_delim(\n  here(\"DATA\", \"2022\", \"input_day_02.txt\"),\n  delim = \" \",\n  col_names = FALSE,\n  skip_empty_rows = FALSE,\n  show_col_types = FALSE\n))\n\n# A tibble: 2,500 × 2\n   X1    X2   \n   &lt;chr&gt; &lt;chr&gt;\n 1 C     Y    \n 2 A     Z    \n 3 B     Y    \n 4 A     Z    \n 5 A     X    \n 6 A     Z    \n 7 B     Y    \n 8 A     Z    \n 9 B     Y    \n10 C     Z    \n# ℹ 2,490 more rows\n\ngames_fct &lt;- games_in %&gt;%\n  rename(opponent = X1, me = X2) %&gt;%\n  mutate(across(.fns = as.factor))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(.fns = as.factor)`.\nCaused by warning:\n! Using `across()` without supplying `.cols` was deprecated in dplyr 1.1.0.\nℹ Please supply `.cols` instead.\n\n\n\n\n\nskimr::skim(games_fct)\n\n\nData summary\n\n\nName\ngames_fct\n\n\nNumber of rows\n2500\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nopponent\n0\n1\nFALSE\n3\nB: 991, C: 795, A: 714\n\n\nme\n0\n1\nFALSE\n3\nY: 1178, Z: 771, X: 551\n\n\n\n\nlevels(games_fct$opponent)\n\n[1] \"A\" \"B\" \"C\"\n\nlevels(games_fct$me)\n\n[1] \"X\" \"Y\" \"Z\"\n\n\n✔️ OK, no missingness and no strange values."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_2.html#check-who-wins-per-round",
    "href": "SOLUTIONS/2022/Day_2.html#check-who-wins-per-round",
    "title": "Day 2",
    "section": "Check who wins per round",
    "text": "Check who wins per round\nI get 0 if I lose, 3 if it’s a draw, and 6 if I win.\n\n#' returns points for player1\ncheck_rules &lt;- function(player1, player2){\n  player1_lose &lt;- 0\n  player1_draw &lt;- 3\n  player1_win &lt;- 6\n\n  all_diff &lt;- player1 - player2\n  map_dbl(all_diff, function(cur_diff){\n    if(cur_diff == 0){ # draw\n      return(player1_draw)\n    }\n    \n    if(abs(cur_diff) == 2){ # one of them has 'rock', one 'scissors'\n      if(cur_diff &lt; 0){\n        return(player1_win)\n      }\n      \n      return(player1_lose)\n    }\n    \n    if(cur_diff &gt; 0){ # check who has higher value\n      return(player1_win)\n    }\n    \n    return(player1_lose)\n  })\n}\n\n(games_fct &lt;- games_fct %&gt;%\n  mutate(points = check_rules(as.numeric(me), as.numeric(opponent))))\n\n# A tibble: 2,500 × 3\n   opponent me    points\n   &lt;fct&gt;    &lt;fct&gt;  &lt;dbl&gt;\n 1 C        Y          0\n 2 A        Z          0\n 3 B        Y          3\n 4 A        Z          0\n 5 A        X          3\n 6 A        Z          0\n 7 B        Y          3\n 8 A        Z          0\n 9 B        Y          3\n10 C        Z          3\n# ℹ 2,490 more rows"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_2.html#get-total-points",
    "href": "SOLUTIONS/2022/Day_2.html#get-total-points",
    "title": "Day 2",
    "section": "Get total points",
    "text": "Get total points\nIn addition to points gained by drawing or winning a round, I get points for what I chose (levels of factor).\n\ntotal_score &lt;- games_fct %&gt;%\n  mutate(total_per_round = as.numeric(me) + points) %&gt;%\n  summarise(grand_total = sum(total_per_round))\n\n\n\nThe total score is 10941!"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_4.html",
    "href": "SOLUTIONS/2022/Day_4.html",
    "title": "Day 4",
    "section": "",
    "text": "Each line contains a pair of sections which two elves should clean.\n\n(sections_list &lt;- read_table(\n  here(\"DATA\", \"2022\", \"input_day_04.txt\"),\n  col_names = \"section_pairs\"\n))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  section_pairs = col_character()\n)\n\n\n# A tibble: 1,000 × 1\n   section_pairs\n   &lt;chr&gt;        \n 1 22-65,22-66  \n 2 91-94,63-91  \n 3 6-88,5-31    \n 4 85-86,64-86  \n 5 40-65,40-65  \n 6 25-82,24-94  \n 7 68-69,68-92  \n 8 60-91,89-92  \n 9 3-72,3-73    \n10 44-85,84-85  \n# ℹ 990 more rows\n\n\nCleaning the data a bit.\n\n(\n  sections_list &lt;- sections_list %&gt;%\n   #extract sections for elves\n   separate(col = section_pairs, into = c(\"elf1\", \"elf2\"), sep = \",\") %&gt;%\n   # extract minimums and maximums for each elf\n   separate(col = elf1, into = c(\"elf1_min\", \"elf1_max\"), sep = \"-\") %&gt;%\n   separate(col = elf2, into = c(\"elf2_min\", \"elf2_max\"), sep = \"-\") %&gt;%\n   mutate(across(.cols = everything(), .fns = as.numeric))\n)\n\n# A tibble: 1,000 × 4\n   elf1_min elf1_max elf2_min elf2_max\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1       22       65       22       66\n 2       91       94       63       91\n 3        6       88        5       31\n 4       85       86       64       86\n 5       40       65       40       65\n 6       25       82       24       94\n 7       68       69       68       92\n 8       60       91       89       92\n 9        3       72        3       73\n10       44       85       84       85\n# ℹ 990 more rows"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_4.html#data",
    "href": "SOLUTIONS/2022/Day_4.html#data",
    "title": "Day 4",
    "section": "",
    "text": "Each line contains a pair of sections which two elves should clean.\n\n(sections_list &lt;- read_table(\n  here(\"DATA\", \"2022\", \"input_day_04.txt\"),\n  col_names = \"section_pairs\"\n))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  section_pairs = col_character()\n)\n\n\n# A tibble: 1,000 × 1\n   section_pairs\n   &lt;chr&gt;        \n 1 22-65,22-66  \n 2 91-94,63-91  \n 3 6-88,5-31    \n 4 85-86,64-86  \n 5 40-65,40-65  \n 6 25-82,24-94  \n 7 68-69,68-92  \n 8 60-91,89-92  \n 9 3-72,3-73    \n10 44-85,84-85  \n# ℹ 990 more rows\n\n\nCleaning the data a bit.\n\n(\n  sections_list &lt;- sections_list %&gt;%\n   #extract sections for elves\n   separate(col = section_pairs, into = c(\"elf1\", \"elf2\"), sep = \",\") %&gt;%\n   # extract minimums and maximums for each elf\n   separate(col = elf1, into = c(\"elf1_min\", \"elf1_max\"), sep = \"-\") %&gt;%\n   separate(col = elf2, into = c(\"elf2_min\", \"elf2_max\"), sep = \"-\") %&gt;%\n   mutate(across(.cols = everything(), .fns = as.numeric))\n)\n\n# A tibble: 1,000 × 4\n   elf1_min elf1_max elf2_min elf2_max\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1       22       65       22       66\n 2       91       94       63       91\n 3        6       88        5       31\n 4       85       86       64       86\n 5       40       65       40       65\n 6       25       82       24       94\n 7       68       69       68       92\n 8       60       91       89       92\n 9        3       72        3       73\n10       44       85       84       85\n# ℹ 990 more rows"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_4.html#overlapping",
    "href": "SOLUTIONS/2022/Day_4.html#overlapping",
    "title": "Day 4",
    "section": "Overlapping",
    "text": "Overlapping\n\nFind entirely overlapping sections.\n\nfind_overlap &lt;- function(min1, min2, max1, max2){\n  # check whether the second set of numbers is contained in the first\n  return(\n    (min2 &gt;= min1) & (max2 &lt;= max1)\n  )\n}\n\n(sections_list_entire_overlap &lt;- sections_list %&gt;%\n  rowwise() %&gt;%\n  mutate(elf2_overlap = find_overlap(elf1_min, elf2_min, elf1_max, elf2_max)) %&gt;%\n  mutate(elf1_overlap = find_overlap(elf2_min, elf1_min, elf2_max, elf1_max)))\n\n# A tibble: 1,000 × 6\n# Rowwise: \n   elf1_min elf1_max elf2_min elf2_max elf2_overlap elf1_overlap\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;lgl&gt;        &lt;lgl&gt;       \n 1       22       65       22       66 FALSE        TRUE        \n 2       91       94       63       91 FALSE        FALSE       \n 3        6       88        5       31 FALSE        FALSE       \n 4       85       86       64       86 FALSE        TRUE        \n 5       40       65       40       65 TRUE         TRUE        \n 6       25       82       24       94 FALSE        TRUE        \n 7       68       69       68       92 FALSE        TRUE        \n 8       60       91       89       92 FALSE        FALSE       \n 9        3       72        3       73 FALSE        TRUE        \n10       44       85       84       85 TRUE         FALSE       \n# ℹ 990 more rows\n\n\nFind the total.\n\ntot_overlap &lt;- sections_list_entire_overlap %&gt;%\n  ungroup() %&gt;%\n  mutate(any_overlap = elf2_overlap | elf1_overlap) %&gt;%\n  summarise(sum_overlap = sum(any_overlap)) %&gt;%\n  pull()\n\n\n\nThe total number of entirely overlapping regions is 584! 🥳\n\n\n\n\nFind overlapping at all\n\nfind_any_overlap &lt;- function(min1, min2, max1, max2){\n  # check whether the second set of numbers is contained in the first\n  return(\n    ((min2 &gt;= min1) & (min2 &lt;= max1)) |\n    ((max2 &lt;= max1) & (max2 &gt;= min1))\n  )\n}\n\n(sections_list_any_overlap &lt;- sections_list %&gt;%\n  rowwise() %&gt;%\n  mutate(elf2_overlap = find_any_overlap(elf1_min, elf2_min, elf1_max, elf2_max)) %&gt;%\n  mutate(elf1_overlap = find_any_overlap(elf2_min, elf1_min, elf2_max, elf1_max)))\n\n# A tibble: 1,000 × 6\n# Rowwise: \n   elf1_min elf1_max elf2_min elf2_max elf2_overlap elf1_overlap\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;lgl&gt;        &lt;lgl&gt;       \n 1       22       65       22       66 TRUE         TRUE        \n 2       91       94       63       91 TRUE         TRUE        \n 3        6       88        5       31 TRUE         TRUE        \n 4       85       86       64       86 TRUE         TRUE        \n 5       40       65       40       65 TRUE         TRUE        \n 6       25       82       24       94 FALSE        TRUE        \n 7       68       69       68       92 TRUE         TRUE        \n 8       60       91       89       92 TRUE         TRUE        \n 9        3       72        3       73 TRUE         TRUE        \n10       44       85       84       85 TRUE         TRUE        \n# ℹ 990 more rows\n\n\nFind total\n\ntot_any_overlap &lt;- sections_list_any_overlap %&gt;%\n  ungroup() %&gt;%\n  mutate(any_overlap = elf2_overlap | elf1_overlap) %&gt;%\n  summarise(sum_overlap = sum(any_overlap)) %&gt;%\n  pull()\n\n\n\nThe total number of at tall overlapping regions is 933! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_6.html",
    "href": "SOLUTIONS/2022/Day_6.html",
    "title": "Day 6",
    "section": "",
    "text": "This is the stream of characters that needs to be proceed in sequential manner to find the start-of-packet marker. This is indicated by a sequence where all four characters are different.\n\n(\n  stream_input &lt;- scan(\n    here(\"DATA\", \"2022\", \"input_day_06.txt\"),\n    what = \"character\"\n    ) %&gt;%\n    strsplit(split = \"\", fixed = TRUE) %&gt;%\n    unlist()\n) %&gt;% head(10)\n\n [1] \"c\" \"v\" \"t\" \"v\" \"b\" \"v\" \"f\" \"b\" \"v\" \"f\""
  },
  {
    "objectID": "SOLUTIONS/2022/Day_6.html#data",
    "href": "SOLUTIONS/2022/Day_6.html#data",
    "title": "Day 6",
    "section": "",
    "text": "This is the stream of characters that needs to be proceed in sequential manner to find the start-of-packet marker. This is indicated by a sequence where all four characters are different.\n\n(\n  stream_input &lt;- scan(\n    here(\"DATA\", \"2022\", \"input_day_06.txt\"),\n    what = \"character\"\n    ) %&gt;%\n    strsplit(split = \"\", fixed = TRUE) %&gt;%\n    unlist()\n) %&gt;% head(10)\n\n [1] \"c\" \"v\" \"t\" \"v\" \"b\" \"v\" \"f\" \"b\" \"v\" \"f\""
  },
  {
    "objectID": "SOLUTIONS/2022/Day_6.html#functions",
    "href": "SOLUTIONS/2022/Day_6.html#functions",
    "title": "Day 6",
    "section": "Functions",
    "text": "Functions\nI will need to check at each item:\n\nwhether there are enough characters to create a marker (i.e., min.4) and\nwhether all last 4 are different\n\n\npop_first &lt;- function(cur_read){\n  return(cur_read[-1])\n}\n\npush_last &lt;- function(cur_read, new_char){\n  return(c(cur_read, new_char))\n}\n\nupdate_cur_read &lt;- function(cur_read, new_char){\n  new_read &lt;- pop_first(cur_read)\n  new_read &lt;- push_last(new_read, new_char)\n  return(new_read)\n}\n\ncheck_uniqueness &lt;- function(cur_read){\n  n_unique &lt;- length(unique(cur_read))\n  return(n_unique == length(cur_read))\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_6.html#process-input",
    "href": "SOLUTIONS/2022/Day_6.html#process-input",
    "title": "Day 6",
    "section": "Process input",
    "text": "Process input\n\ncur_position &lt;- 4\ncur_read &lt;- stream_input[1:cur_position]\n\n\nwhile (!check_uniqueness(cur_read) | cur_position == length(stream_input)) {\n  cur_position &lt;- cur_position + 1\n  new_char &lt;- stream_input[cur_position]\n  \n  cur_read &lt;&lt;- update_cur_read(cur_read, new_char)\n}\n\n\n\nThe number of characters to be processed before the first start-of-packet marker is detected is 1093! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_6.html#detect-start-of-the-message-marker",
    "href": "SOLUTIONS/2022/Day_6.html#detect-start-of-the-message-marker",
    "title": "Day 6",
    "section": "Detect start-of-the-message marker",
    "text": "Detect start-of-the-message marker\nThe start-of-the-message marker consists of 14 distinct characters!\n\ncur_position &lt;- 14\ncur_read &lt;- stream_input[1:cur_position]\n\n\nwhile (!check_uniqueness(cur_read) | cur_position == length(stream_input)) {\n  cur_position &lt;- cur_position + 1\n  new_char &lt;- stream_input[cur_position]\n  \n  cur_read &lt;&lt;- update_cur_read(cur_read, new_char)\n}\n\n\n\nThe number of characters to be processed before the first start-of-message marker is detected is 3534! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_8.html",
    "href": "SOLUTIONS/2022/Day_8.html",
    "title": "Day 8",
    "section": "",
    "text": "The input is height of the trees on a grid.\n\ninput_file_path &lt;- here(\"DATA\", \"2022\", \"input_day_08.txt\")\n\nno_rows &lt;- system(paste(\"wc -l\", input_file_path), intern = TRUE) %&gt;%\n  word(1) %&gt;%\n  as.numeric()\nno_cols &lt;- scan(input_file_path, what = \"character\", nmax = 1) %&gt;% str_length()\n\nThere are 99 rows and 99 columns on the grid.\n\ninput_grid &lt;- scan(\n  input_file_path,\n  what = \"character\"\n)\n# let's make a matrix out of it\ninput_grid &lt;- map(\n  input_grid,\n  function(row){\n    cur_row_trees &lt;- str_split(row, pattern = \"\") %&gt;%\n      unlist()\n    return(as.numeric(cur_row_trees))\n  }) %&gt;%\n  do.call(rbind, args = .)\n\nWe can visualize it:\n\ninput_grid %&gt;%\n  as_tibble(rownames = \"row\") %&gt;%\n  pivot_longer(cols = V1:V99, names_to = \"col\", values_to = \"val\") %&gt;%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row)\n  ) %&gt;%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = as.factor(val))) +\n  coord_fixed() +\n  scale_fill_grey() +\n  theme_minimal()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_8.html#data",
    "href": "SOLUTIONS/2022/Day_8.html#data",
    "title": "Day 8",
    "section": "",
    "text": "The input is height of the trees on a grid.\n\ninput_file_path &lt;- here(\"DATA\", \"2022\", \"input_day_08.txt\")\n\nno_rows &lt;- system(paste(\"wc -l\", input_file_path), intern = TRUE) %&gt;%\n  word(1) %&gt;%\n  as.numeric()\nno_cols &lt;- scan(input_file_path, what = \"character\", nmax = 1) %&gt;% str_length()\n\nThere are 99 rows and 99 columns on the grid.\n\ninput_grid &lt;- scan(\n  input_file_path,\n  what = \"character\"\n)\n# let's make a matrix out of it\ninput_grid &lt;- map(\n  input_grid,\n  function(row){\n    cur_row_trees &lt;- str_split(row, pattern = \"\") %&gt;%\n      unlist()\n    return(as.numeric(cur_row_trees))\n  }) %&gt;%\n  do.call(rbind, args = .)\n\nWe can visualize it:\n\ninput_grid %&gt;%\n  as_tibble(rownames = \"row\") %&gt;%\n  pivot_longer(cols = V1:V99, names_to = \"col\", values_to = \"val\") %&gt;%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row)\n  ) %&gt;%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = as.factor(val))) +\n  coord_fixed() +\n  scale_fill_grey() +\n  theme_minimal()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`."
  },
  {
    "objectID": "SOLUTIONS/2022/Day_8.html#functions",
    "href": "SOLUTIONS/2022/Day_8.html#functions",
    "title": "Day 8",
    "section": "Functions",
    "text": "Functions\n\ncheck_visibility &lt;- function(sequence, last = TRUE){\n  # I have a sequence of heights that ends or begins with the tree we are checking\n  if(last){\n    chosen_tree &lt;- sequence[length(sequence)]\n    other_trees &lt;- sequence[-length(sequence)]\n    return(all(other_trees &lt; chosen_tree))\n  }\n  \n  chosen_tree &lt;- sequence[1]\n  other_trees &lt;- sequence[-1]\n  return(all(other_trees &lt; chosen_tree))\n}"
  },
  {
    "objectID": "SOLUTIONS/2022/Day_8.html#check-all-trees",
    "href": "SOLUTIONS/2022/Day_8.html#check-all-trees",
    "title": "Day 8",
    "section": "Check all trees",
    "text": "Check all trees\nWe don’t need to check trees that are on the edge.\n\nno_visible_trees &lt;- no_cols*2 + (no_rows - 2)*2\n\nvisibility_matrix &lt;- matrix(\n  NA, nrow = no_rows, ncol = no_cols\n)\nfor(cur_row in 2:(no_rows - 1)){\n  for(cur_col in 2:(no_cols - 1)){\n    # check from top\n    cur_sequence &lt;- input_grid[1:cur_row, cur_col]\n    vis_from_top &lt;- check_visibility(cur_sequence)\n    # check from bottom\n    cur_sequence &lt;- input_grid[cur_row:no_rows, cur_col]\n    vis_from_bottom &lt;- check_visibility(cur_sequence, FALSE)\n    # check from left\n    cur_sequence &lt;- input_grid[cur_row, 1:cur_col]\n    vis_from_left &lt;- check_visibility(cur_sequence)\n    # check from right\n    cur_sequence &lt;- input_grid[cur_row, cur_col:no_cols]\n    vis_from_right &lt;- check_visibility(cur_sequence, FALSE)\n    \n    cur_tree_vis &lt;- any(\n      c(vis_from_top, vis_from_bottom, vis_from_left, vis_from_right)\n    )\n    visibility_matrix[cur_row, cur_col] &lt;- cur_tree_vis\n    no_visible_trees &lt;&lt;- no_visible_trees + as.numeric(cur_tree_vis)\n  }\n}\n\nThat’s how looks the visibility matrix:\n\nvisibility_matrix %&gt;%\n  as_tibble(rownames = \"row\") %&gt;%\n  pivot_longer(cols = V1:V99, names_to = \"col\", values_to = \"val\") %&gt;%\n  mutate(\n    col = as.numeric(str_sub(col, start = 2, end = -1)),\n    row = as.numeric(row)\n  ) %&gt;%\n  ggplot(aes(col, row)) +\n  geom_tile(aes(fill = val)) +\n  coord_fixed() +\n  scale_fill_grey() +\n  theme_minimal()\n\n\n\n\n\n\nThere are 1823 trees that are visible from outside of the grid! 🥳"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_02.html",
    "href": "SOLUTIONS/2023/Day_02.html",
    "title": "Day 2",
    "section": "",
    "text": "Each line is a different game. Each game contains draws separated by semicolon. Each draw contains number of cubes that were selected in each color: red, green, or blue.\n\ninput_file = open(\"../../DATA/2023/input_day02.txt\", \"r\");\n#input_file = open(\"DATA/2023/example_input_day02.txt\", \"r\");\npeek(input_file, String)\n\n\"Game 1: 4 blue, 16 green, 2 red; 5 red, 11 blue, 16 green; 9 green, 11 blue; 10 blue, 6 green, 4 red\\nGame 2: 15 green, 20 red, 8 blue; 12 green, 7 red; 10 green, 2 blue, 15 red; 13 blue, 15 red\\nGame 3: 8 red, 2 blue; 3 green, 10 blue, 10 red; 7 green, 4 blue, 7 red; 8 r\" ⋯ 10303 bytes ⋯ \"98: 4 blue, 9 red; 10 red, 1 green, 11 blue; 7 blue, 1 red; 1 red, 6 blue, 1 green\\nGame 99: 7 red, 6 green, 2 blue; 8 red; 16 green, 7 red, 4 blue\\nGame 100: 1 red, 1 green, 9 blue; 6 blue, 4 green, 3 red; 4 red, 2 green; 3 green, 2 red, 11 blue; 6 green, 5 blue, 1 red\\n\""
  },
  {
    "objectID": "SOLUTIONS/2023/Day_02.html#the-input",
    "href": "SOLUTIONS/2023/Day_02.html#the-input",
    "title": "Day 2",
    "section": "",
    "text": "Each line is a different game. Each game contains draws separated by semicolon. Each draw contains number of cubes that were selected in each color: red, green, or blue.\n\ninput_file = open(\"../../DATA/2023/input_day02.txt\", \"r\");\n#input_file = open(\"DATA/2023/example_input_day02.txt\", \"r\");\npeek(input_file, String)\n\n\"Game 1: 4 blue, 16 green, 2 red; 5 red, 11 blue, 16 green; 9 green, 11 blue; 10 blue, 6 green, 4 red\\nGame 2: 15 green, 20 red, 8 blue; 12 green, 7 red; 10 green, 2 blue, 15 red; 13 blue, 15 red\\nGame 3: 8 red, 2 blue; 3 green, 10 blue, 10 red; 7 green, 4 blue, 7 red; 8 r\" ⋯ 10303 bytes ⋯ \"98: 4 blue, 9 red; 10 red, 1 green, 11 blue; 7 blue, 1 red; 1 red, 6 blue, 1 green\\nGame 99: 7 red, 6 green, 2 blue; 8 red; 16 green, 7 red, 4 blue\\nGame 100: 1 red, 1 green, 9 blue; 6 blue, 4 green, 3 red; 4 red, 2 green; 3 green, 2 red, 11 blue; 6 green, 5 blue, 1 red\\n\""
  },
  {
    "objectID": "SOLUTIONS/2023/Day_02.html#part-1",
    "href": "SOLUTIONS/2023/Day_02.html#part-1",
    "title": "Day 2",
    "section": "Part 1",
    "text": "Part 1\n\nThe problem\n\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes.\n\nFirst, let’s create a dataset with all draws.\n\nall_games = DataFrame(\n    game_no = 0,\n    colors = \"\",\n    draws = 0\n);\n\nWe will also need a function to find these different numbers and colors.\n\nfunction find_colors_numbers(draws::String, color::String)\n    out_num_cubes = Int32[];\n    idx = 1;\n    while idx &lt; lastindex(draws)\n        m = match(\n            Regex(\" (?&lt;num_cubes&gt;\\\\d+) $color\"),\n            draws,\n            idx\n        );\n        if isnothing(m)\n            break\n        end\n        push!(out_num_cubes, parse(Int32, m[\"num_cubes\"]));\n        idx = m.offset + length(m.match);\n    end\n    return out_num_cubes\nend\n\nfind_colors_numbers (generic function with 1 method)\n\n\n\nall_colors = [\"red\", \"green\", \"blue\"];\n\nline = readline(input_file);\nwhile line != \"\"\n    split_first = split(line, \":\");\n    game_no = split(\n        first(split_first), \" \"\n    ) |&gt;\n    x -&gt; parse(Int32, last(x));\n    draws = map(\n        find_colors_numbers,\n        [line, line, line],\n        all_colors\n    );\n    cur_games = DataFrame(\n        game_no = game_no,\n        colors = all_colors,\n        draws = draws\n    ) |&gt;\n        x -&gt; flatten(x, :draws);\n    append!(all_games, cur_games);\n\n    # read the next line:\n    global line = readline(input_file);\nend\n\nclose(input_file)\n\n\n\nThe solution\nLet’s check which draws gave more than 12 red cubes, 13 green cubes, and 14 blue cubes.\n\nall_no_draws = [12, 13, 14];\n\nfunction get_games_not_possible(color, no_draws)\n    cur_subset = subset(\n        all_games,\n        :colors =&gt; col -&gt; col .== color,\n        :draws =&gt; dr -&gt; dr .&gt; no_draws\n    );\n    return unique(cur_subset.game_no)\nend\n\nget_games_not_possible (generic function with 1 method)\n\n\n\nall_games_ids_not_possible = map(\n        get_games_not_possible,\n        all_colors,\n        all_no_draws\n    ) |&gt;\n        x -&gt; unique(vcat(x...));\nall_games_ids_possible = setdiff(unique(all_games.game_no), all_games_ids_not_possible);\n\n\n\nThe sum of these numbers is 2685."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_02.html#part-2",
    "href": "SOLUTIONS/2023/Day_02.html#part-2",
    "title": "Day 2",
    "section": "Part 2",
    "text": "Part 2\n\nThe problem\n\nWhat is the minimum number of cubes that makes each game possible?\n\nThis means, that I need to find the minimum number in each game, for each color.\n\nmin_cubes_all_games = combine(\n    groupby(all_games, [:game_no, :colors]),\n    :draws =&gt; (x -&gt; max(x...)) =&gt; :max_draw\n)\n\n301×3 DataFrame276 rows omitted\n\n\n\nRow\ngame_no\ncolors\nmax_draw\n\n\n\nInt64\nString\nInt64\n\n\n\n\n1\n0\n\n0\n\n\n2\n1\nred\n5\n\n\n3\n1\ngreen\n16\n\n\n4\n1\nblue\n11\n\n\n5\n2\nred\n20\n\n\n6\n2\ngreen\n15\n\n\n7\n2\nblue\n13\n\n\n8\n3\nred\n10\n\n\n9\n3\ngreen\n7\n\n\n10\n3\nblue\n13\n\n\n11\n4\nred\n14\n\n\n12\n4\ngreen\n13\n\n\n13\n4\nblue\n18\n\n\n⋮\n⋮\n⋮\n⋮\n\n\n290\n97\nred\n4\n\n\n291\n97\ngreen\n1\n\n\n292\n97\nblue\n15\n\n\n293\n98\nred\n10\n\n\n294\n98\ngreen\n1\n\n\n295\n98\nblue\n11\n\n\n296\n99\nred\n8\n\n\n297\n99\ngreen\n16\n\n\n298\n99\nblue\n4\n\n\n299\n100\nred\n4\n\n\n300\n100\ngreen\n6\n\n\n301\n100\nblue\n11\n\n\n\n\n\n\n\n\nThe solution\nThen, for each game, multiply the minimal numbers and sum up.\n\npowers_per_game = combine(\n    groupby(min_cubes_all_games, :game_no),\n    :max_draw =&gt; (x -&gt; reduce(*, x)) =&gt; :power\n)\n\n101×2 DataFrame76 rows omitted\n\n\n\nRow\ngame_no\npower\n\n\n\nInt64\nInt64\n\n\n\n\n1\n0\n0\n\n\n2\n1\n880\n\n\n3\n2\n3900\n\n\n4\n3\n910\n\n\n5\n4\n3276\n\n\n6\n5\n216\n\n\n7\n6\n198\n\n\n8\n7\n384\n\n\n9\n8\n40\n\n\n10\n9\n728\n\n\n11\n10\n288\n\n\n12\n11\n1980\n\n\n13\n12\n70\n\n\n⋮\n⋮\n⋮\n\n\n90\n89\n2250\n\n\n91\n90\n51\n\n\n92\n91\n864\n\n\n93\n92\n1848\n\n\n94\n93\n18\n\n\n95\n94\n378\n\n\n96\n95\n840\n\n\n97\n96\n810\n\n\n98\n97\n60\n\n\n99\n98\n110\n\n\n100\n99\n512\n\n\n101\n100\n264\n\n\n\n\n\n\n\n\nThe sum of these numbers is 83707."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_04.html",
    "href": "SOLUTIONS/2023/Day_04.html",
    "title": "Day 4",
    "section": "",
    "text": "Each line consists of symbols and digits. Digits form numbers, delimited by either . (full stop) or another symbol. A number is part of the engine if it is adjacent to any symbol other than . (even diagonally).\n\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day04.txt\");\ninput_data = CSV.read(input_file, DataFrame; header = false, delim = \"|\")\n\n218×2 DataFrame193 rows omitted\n\n\n\nRow\nColumn1\nColumn2\n\n\n\nString\nString\n\n\n\n\n1\nCard 1: 79 93 21 74 81 76 17 89 3 5\n5 67 87 81 76 35 79 21 15 80 8 74 99 28 3 23 19 42 89 16 22 77 92 70 34\n\n\n2\nCard 2: 83 16 24 23 59 70 14 57 74 53\n79 82 70 23 61 14 74 57 36 37 59 72 83 16 3 2 28 63 50 60 38 86 97 24 53\n\n\n3\nCard 3: 12 77 13 14 48 55 69 4 18 81\n69 7 94 88 18 73 55 48 49 81 14 21 12 15 5 27 22 84 51 52 13 77 4 57 17\n\n\n4\nCard 4: 32 35 57 27 15 5 16 40 36 46\n84 47 76 35 83 5 22 15 72 48 57 33 46 53 43 16 10 65 32 51 36 44 40 27 97\n\n\n5\nCard 5: 8 72 57 36 45 96 7 13 17 14\n46 40 8 7 57 60 69 89 17 13 16 51 45 72 55 64 76 42 14 29 21 9 96 36 94\n\n\n6\nCard 6: 22 46 55 8 70 91 11 89 31 5\n31 22 40 10 11 61 42 19 87 92 96 34 76 21 89 18 46 8 55 30 36 70 91 63 5\n\n\n7\nCard 7: 5 66 19 57 97 24 45 44 29 86\n27 1 70 97 60 90 93 69 29 44 86 49 42 57 58 45 88 24 5 19 95 66 46 78 31\n\n\n8\nCard 8: 67 4 51 50 91 39 63 52 77 47\n61 23 54 77 63 51 98 20 47 57 90 7 91 65 79 82 39 72 75 24 52 27 50 67 4\n\n\n9\nCard 9: 99 26 2 15 51 56 63 69 39 41\n91 10 81 53 23 41 75 33 3 39 9 24 2 5 93 51 25 37 99 69 15 7 35 67 63\n\n\n10\nCard 10: 31 90 84 42 34 74 96 66 71 75\n4 31 43 90 96 70 60 75 5 42 11 6 21 76 2 41 34 99 84 14 77 33 24 71 12\n\n\n11\nCard 11: 66 55 30 68 45 5 82 71 27 85\n60 26 40 3 94 93 2 76 7 75 46 47 82 37 8 34 62 92 51 53 32 88 12 44 83\n\n\n12\nCard 12: 49 39 86 99 88 3 51 41 46 64\n31 95 25 32 19 98 3 78 88 94 50 80 4 51 55 35 17 24 89 71 67 99 2 69 37\n\n\n13\nCard 13: 53 56 84 7 35 8 55 75 24 13\n42 34 30 94 81 95 12 68 69 38 50 17 11 23 89 19 15 79 47 26 88 99 16 44 27\n\n\n⋮\n⋮\n⋮\n\n\n207\nCard 207: 9 91 26 59 87 90 22 12 51 99\n40 9 85 99 1 11 93 61 56 82 90 91 59 6 12 31 86 76 51 87 92 35 19 34 54\n\n\n208\nCard 208: 54 92 81 40 30 51 72 70 84 52\n30 76 74 92 7 81 51 21 35 99 77 80 94 78 16 86 70 31 46 90 44 14 6 52 40\n\n\n209\nCard 209: 49 44 6 38 33 83 75 95 39 72\n46 30 75 17 1 28 15 9 44 6 16 89 78 22 95 2 72 59 38 36 25 43 42 41 67\n\n\n210\nCard 210: 10 40 91 1 46 69 92 45 31 41\n35 1 55 31 30 14 96 91 92 69 45 20 40 77 15 82 17 79 46 44 56 23 53 38 73\n\n\n211\nCard 211: 67 27 31 84 61 64 58 68 21 74\n21 52 88 6 73 36 58 89 1 46 18 17 86 85 28 23 27 25 29 78 79 50 90 30 70\n\n\n212\nCard 212: 61 14 31 4 8 43 52 37 56 45\n70 90 64 58 99 82 21 3 38 74 67 59 17 86 36 51 49 69 68 45 71 10 72 1 20\n\n\n213\nCard 213: 51 69 54 42 23 68 27 98 47 4\n20 99 66 15 61 43 62 3 60 75 90 47 16 40 80 51 13 87 83 94 49 42 69 74 24\n\n\n214\nCard 214: 38 6 78 12 88 14 51 82 29 75\n70 16 48 74 19 29 5 71 40 93 1 18 83 27 76 59 44 63 58 64 69 23 73 65 54\n\n\n215\nCard 215: 67 60 86 35 17 62 55 27 54 70\n9 26 45 56 43 72 1 32 25 88 5 87 73 81 2 34 57 13 61 3 84 4 33 92 59\n\n\n216\nCard 216: 18 71 4 89 17 31 63 28 25 20\n67 97 6 76 3 95 30 75 99 26 27 32 21 73 86 31 59 98 85 1 54 93 94 69 66\n\n\n217\nCard 217: 54 65 75 13 46 8 37 25 95 82\n57 14 83 33 69 47 68 64 4 21 17 92 2 48 30 70 62 50 36 7 72 66 41 85 97\n\n\n218\nCard 218: 68 97 66 41 88 16 65 31 23 63\n29 67 55 64 91 4 12 83 1 40 74 94 58 81 98 82 78 70 26 34 96 14 36 50 56"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_04.html#the-input",
    "href": "SOLUTIONS/2023/Day_04.html#the-input",
    "title": "Day 4",
    "section": "",
    "text": "Each line consists of symbols and digits. Digits form numbers, delimited by either . (full stop) or another symbol. A number is part of the engine if it is adjacent to any symbol other than . (even diagonally).\n\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day04.txt\");\ninput_data = CSV.read(input_file, DataFrame; header = false, delim = \"|\")\n\n218×2 DataFrame193 rows omitted\n\n\n\nRow\nColumn1\nColumn2\n\n\n\nString\nString\n\n\n\n\n1\nCard 1: 79 93 21 74 81 76 17 89 3 5\n5 67 87 81 76 35 79 21 15 80 8 74 99 28 3 23 19 42 89 16 22 77 92 70 34\n\n\n2\nCard 2: 83 16 24 23 59 70 14 57 74 53\n79 82 70 23 61 14 74 57 36 37 59 72 83 16 3 2 28 63 50 60 38 86 97 24 53\n\n\n3\nCard 3: 12 77 13 14 48 55 69 4 18 81\n69 7 94 88 18 73 55 48 49 81 14 21 12 15 5 27 22 84 51 52 13 77 4 57 17\n\n\n4\nCard 4: 32 35 57 27 15 5 16 40 36 46\n84 47 76 35 83 5 22 15 72 48 57 33 46 53 43 16 10 65 32 51 36 44 40 27 97\n\n\n5\nCard 5: 8 72 57 36 45 96 7 13 17 14\n46 40 8 7 57 60 69 89 17 13 16 51 45 72 55 64 76 42 14 29 21 9 96 36 94\n\n\n6\nCard 6: 22 46 55 8 70 91 11 89 31 5\n31 22 40 10 11 61 42 19 87 92 96 34 76 21 89 18 46 8 55 30 36 70 91 63 5\n\n\n7\nCard 7: 5 66 19 57 97 24 45 44 29 86\n27 1 70 97 60 90 93 69 29 44 86 49 42 57 58 45 88 24 5 19 95 66 46 78 31\n\n\n8\nCard 8: 67 4 51 50 91 39 63 52 77 47\n61 23 54 77 63 51 98 20 47 57 90 7 91 65 79 82 39 72 75 24 52 27 50 67 4\n\n\n9\nCard 9: 99 26 2 15 51 56 63 69 39 41\n91 10 81 53 23 41 75 33 3 39 9 24 2 5 93 51 25 37 99 69 15 7 35 67 63\n\n\n10\nCard 10: 31 90 84 42 34 74 96 66 71 75\n4 31 43 90 96 70 60 75 5 42 11 6 21 76 2 41 34 99 84 14 77 33 24 71 12\n\n\n11\nCard 11: 66 55 30 68 45 5 82 71 27 85\n60 26 40 3 94 93 2 76 7 75 46 47 82 37 8 34 62 92 51 53 32 88 12 44 83\n\n\n12\nCard 12: 49 39 86 99 88 3 51 41 46 64\n31 95 25 32 19 98 3 78 88 94 50 80 4 51 55 35 17 24 89 71 67 99 2 69 37\n\n\n13\nCard 13: 53 56 84 7 35 8 55 75 24 13\n42 34 30 94 81 95 12 68 69 38 50 17 11 23 89 19 15 79 47 26 88 99 16 44 27\n\n\n⋮\n⋮\n⋮\n\n\n207\nCard 207: 9 91 26 59 87 90 22 12 51 99\n40 9 85 99 1 11 93 61 56 82 90 91 59 6 12 31 86 76 51 87 92 35 19 34 54\n\n\n208\nCard 208: 54 92 81 40 30 51 72 70 84 52\n30 76 74 92 7 81 51 21 35 99 77 80 94 78 16 86 70 31 46 90 44 14 6 52 40\n\n\n209\nCard 209: 49 44 6 38 33 83 75 95 39 72\n46 30 75 17 1 28 15 9 44 6 16 89 78 22 95 2 72 59 38 36 25 43 42 41 67\n\n\n210\nCard 210: 10 40 91 1 46 69 92 45 31 41\n35 1 55 31 30 14 96 91 92 69 45 20 40 77 15 82 17 79 46 44 56 23 53 38 73\n\n\n211\nCard 211: 67 27 31 84 61 64 58 68 21 74\n21 52 88 6 73 36 58 89 1 46 18 17 86 85 28 23 27 25 29 78 79 50 90 30 70\n\n\n212\nCard 212: 61 14 31 4 8 43 52 37 56 45\n70 90 64 58 99 82 21 3 38 74 67 59 17 86 36 51 49 69 68 45 71 10 72 1 20\n\n\n213\nCard 213: 51 69 54 42 23 68 27 98 47 4\n20 99 66 15 61 43 62 3 60 75 90 47 16 40 80 51 13 87 83 94 49 42 69 74 24\n\n\n214\nCard 214: 38 6 78 12 88 14 51 82 29 75\n70 16 48 74 19 29 5 71 40 93 1 18 83 27 76 59 44 63 58 64 69 23 73 65 54\n\n\n215\nCard 215: 67 60 86 35 17 62 55 27 54 70\n9 26 45 56 43 72 1 32 25 88 5 87 73 81 2 34 57 13 61 3 84 4 33 92 59\n\n\n216\nCard 216: 18 71 4 89 17 31 63 28 25 20\n67 97 6 76 3 95 30 75 99 26 27 32 21 73 86 31 59 98 85 1 54 93 94 69 66\n\n\n217\nCard 217: 54 65 75 13 46 8 37 25 95 82\n57 14 83 33 69 47 68 64 4 21 17 92 2 48 30 70 62 50 36 7 72 66 41 85 97\n\n\n218\nCard 218: 68 97 66 41 88 16 65 31 23 63\n29 67 55 64 91 4 12 83 1 40 74 94 58 81 98 82 78 70 26 34 96 14 36 50 56"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_04.html#part-1",
    "href": "SOLUTIONS/2023/Day_04.html#part-1",
    "title": "Day 4",
    "section": "Part 1",
    "text": "Part 1\nHow many of the numbers in column1 are in column2?\n\nfunction create_numvec(in_string::String, sep::Char)\n    return (split(in_string, sep; keepempty = false) |&gt;\n        x -&gt; parse.(Int, x))\nend\n\ncreate_numvec (generic function with 1 method)\n\n\n\nall_points = Int32[];\nfor row_no in 1:nrow(input_data)\n    input_nums = last(split(input_data[row_no, :Column1], \":\"));\n    input_nums = create_numvec(String(input_nums), ' ');\n\n    winning_nums = create_numvec(String(input_data[row_no, :Column2]), ' ');\n\n    how_many_win = length(intersect(input_nums, winning_nums));\n    how_many_points = how_many_win == 0 ? 0 : 2^(how_many_win - 1);\n    push!(all_points, how_many_points);\nend\nall_points\n\n218-element Vector{Int32}:\n 128\n 512\n 512\n 512\n 512\n 512\n 512\n 512\n 128\n 128\n   1\n   8\n   0\n   ⋮\n 128\n  64\n  32\n 128\n   4\n   1\n   8\n   1\n   0\n   1\n   0\n   0\n\n\n\nThe solution\n\n\nThe sum of these numbers is 26443."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_06.html",
    "href": "SOLUTIONS/2023/Day_06.html",
    "title": "Day 6",
    "section": "",
    "text": "The races’ times and distances:\n\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day06.txt\");\ninput_data = read(open(input_file, \"r\"), String);\nprintln(input_data)\n\nTime:        58     81     96     76\nDistance:   434   1041   2219   1218\n\n\n\n\ntime_line , dist_line = split(input_data, \"\\n\")[1:2]\ntimes = split(time_line, r\"\\s+\")[2:end] |&gt;\n    x -&gt; parse.(Int64, x)\ndistances = split(dist_line, r\"\\s+\")[2:end] |&gt;\n    x -&gt; parse.(Int64, x)\n\n4-element Vector{Int64}:\n  434\n 1041\n 2219\n 1218"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_06.html#the-input",
    "href": "SOLUTIONS/2023/Day_06.html#the-input",
    "title": "Day 6",
    "section": "",
    "text": "The races’ times and distances:\n\nroot = dirname(@__FILE__);\ninput_file = joinpath(root, \"..\", \"..\", \"DATA\", \"2023\", \"input_day06.txt\");\ninput_data = read(open(input_file, \"r\"), String);\nprintln(input_data)\n\nTime:        58     81     96     76\nDistance:   434   1041   2219   1218\n\n\n\n\ntime_line , dist_line = split(input_data, \"\\n\")[1:2]\ntimes = split(time_line, r\"\\s+\")[2:end] |&gt;\n    x -&gt; parse.(Int64, x)\ndistances = split(dist_line, r\"\\s+\")[2:end] |&gt;\n    x -&gt; parse.(Int64, x)\n\n4-element Vector{Int64}:\n  434\n 1041\n 2219\n 1218"
  },
  {
    "objectID": "SOLUTIONS/2023/Day_06.html#part-1",
    "href": "SOLUTIONS/2023/Day_06.html#part-1",
    "title": "Day 6",
    "section": "Part 1",
    "text": "Part 1\n\nThe problem\nFor each race, we can hold the button to charge the boat for varying number of miliseconds but not exceed the maximum time given in the input file. With each milisecond of holding the button, the boat gains 1ms/mm velocity.\n\nfunction find_max_dist(time_hold_button::Int64, max_time::Int64)\n    return (max_time - time_hold_button)*time_hold_button\nend\n\nfind_max_dist (generic function with 1 method)\n\n\n\n\nThe solution\nWe need to find the number of ways we can get larger distance than what is in the input file.\n\nall_winning_approaches = Int64[];\nfor idx in 1:lastindex(times)\n    cur_max_time = times[idx];\n    cur_max_dist = distances[idx];\n    cur_winning_approaches = 0;\n    for t in 1:(cur_max_time - 1)\n        max_dist = find_max_dist(t, cur_max_time)\n        if max_dist &gt; cur_max_dist\n            cur_winning_approaches += 1;\n        end\n    end\n    push!(all_winning_approaches, cur_winning_approaches);\nend\n\n\n\nThe total number of ways to win all the races: 1159152."
  },
  {
    "objectID": "SOLUTIONS/2023/Day_06.html#part-2",
    "href": "SOLUTIONS/2023/Day_06.html#part-2",
    "title": "Day 6",
    "section": "Part 2",
    "text": "Part 2\nInstead of the input showing many races, it’s actually one!\n\none_time = parse(Int64, string(times...))\none_distance = parse(Int64, string(distances...))\n\ncur_winning_approaches = 0;\nfor t in 1:(one_time - 1)\n    max_dist = find_max_dist(t, one_time)\n    if max_dist &gt; one_distance\n        cur_winning_approaches += 1;\n    end\nend\n\n\nThe solution\n\n\nThe total number of ways to win the long race: 41513103."
  },
  {
    "objectID": "YEARS/2022.html",
    "href": "YEARS/2022.html",
    "title": "Year 2022",
    "section": "",
    "text": "My take on the puzzles in 2022 edition of Advent of Code.\n\n\n\n1\n\n\n\n\n2\n\n\n\n\n3\n\n\n\n\n4\n\n\n\n\n5\n\n\n\n\n6\n\n\n\n\n7\n\n\n\n\n8\n\n\n\n\n9\n\n\n\n\n10\n\n\n\n\n11\n\n\n\n\n12\n\n\n\n\n13\n\n\n\n\n14\n\n\n\n\n15\n\n\n\n\n16\n\n\n\n\n17\n\n\n\n\n18\n\n\n\n\n19\n\n\n\n\n20\n\n\n\n\n21\n\n\n\n\n22\n\n\n\n\n23\n\n\n\n\n24"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]